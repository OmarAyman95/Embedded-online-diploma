
STM32_GPIOs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000128c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013ec  080013ec  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080013ec  080013ec  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013ec  080013ec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f0  080013f0  000113f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080013f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000018  0800140c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800140c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004074  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bfe  00000000  00000000  000240b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000016e8  00000000  00000000  00024cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000360  00000000  00000000  000263a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  00026700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002628  00000000  00000000  000269e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002fef  00000000  00000000  00029010  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007d269  00000000  00000000  0002bfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a9268  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b78  00000000  00000000  000a92e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001380 	.word	0x08001380

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001380 	.word	0x08001380

0800014c <External_Interrupt_Edge_Selector>:

int32_t External_Interrupt_Line= -1;
void(*ptrToIRQx[15])(void);

static void External_Interrupt_Edge_Selector(uint8_t pin_no,uint8_t edge)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]

	EXTI->FTSR &=~(1U<<pin_no);
 800015c:	4b23      	ldr	r3, [pc, #140]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 800015e:	68da      	ldr	r2, [r3, #12]
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	2101      	movs	r1, #1
 8000164:	fa01 f303 	lsl.w	r3, r1, r3
 8000168:	43db      	mvns	r3, r3
 800016a:	4920      	ldr	r1, [pc, #128]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 800016c:	4013      	ands	r3, r2
 800016e:	60cb      	str	r3, [r1, #12]
	EXTI->RTSR &=~(1U<<pin_no);
 8000170:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 8000172:	689a      	ldr	r2, [r3, #8]
 8000174:	79fb      	ldrb	r3, [r7, #7]
 8000176:	2101      	movs	r1, #1
 8000178:	fa01 f303 	lsl.w	r3, r1, r3
 800017c:	43db      	mvns	r3, r3
 800017e:	491b      	ldr	r1, [pc, #108]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 8000180:	4013      	ands	r3, r2
 8000182:	608b      	str	r3, [r1, #8]

	      if (edge == 0)EXTI->FTSR|=(1U<<pin_no);
 8000184:	79bb      	ldrb	r3, [r7, #6]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d109      	bne.n	800019e <External_Interrupt_Edge_Selector+0x52>
 800018a:	4b18      	ldr	r3, [pc, #96]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 800018c:	68da      	ldr	r2, [r3, #12]
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2101      	movs	r1, #1
 8000192:	fa01 f303 	lsl.w	r3, r1, r3
 8000196:	4915      	ldr	r1, [pc, #84]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 8000198:	4313      	orrs	r3, r2
 800019a:	60cb      	str	r3, [r1, #12]
	 else if (edge == 1)EXTI->RTSR|=(1U<<pin_no);
	 else if (edge == 2){EXTI->FTSR|=(1U<<pin_no);EXTI->RTSR|=(1U<<pin_no);}
	 else               {}
}
 800019c:	e021      	b.n	80001e2 <External_Interrupt_Edge_Selector+0x96>
	 else if (edge == 1)EXTI->RTSR|=(1U<<pin_no);
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d109      	bne.n	80001b8 <External_Interrupt_Edge_Selector+0x6c>
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 80001a6:	689a      	ldr	r2, [r3, #8]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2101      	movs	r1, #1
 80001ac:	fa01 f303 	lsl.w	r3, r1, r3
 80001b0:	490e      	ldr	r1, [pc, #56]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 80001b2:	4313      	orrs	r3, r2
 80001b4:	608b      	str	r3, [r1, #8]
}
 80001b6:	e014      	b.n	80001e2 <External_Interrupt_Edge_Selector+0x96>
	 else if (edge == 2){EXTI->FTSR|=(1U<<pin_no);EXTI->RTSR|=(1U<<pin_no);}
 80001b8:	79bb      	ldrb	r3, [r7, #6]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d111      	bne.n	80001e2 <External_Interrupt_Edge_Selector+0x96>
 80001be:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 80001c0:	68da      	ldr	r2, [r3, #12]
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2101      	movs	r1, #1
 80001c6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 80001cc:	4313      	orrs	r3, r2
 80001ce:	60cb      	str	r3, [r1, #12]
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 80001d2:	689a      	ldr	r2, [r3, #8]
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	2101      	movs	r1, #1
 80001d8:	fa01 f303 	lsl.w	r3, r1, r3
 80001dc:	4903      	ldr	r1, [pc, #12]	; (80001ec <External_Interrupt_Edge_Selector+0xa0>)
 80001de:	4313      	orrs	r3, r2
 80001e0:	608b      	str	r3, [r1, #8]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40010400 	.word	0x40010400

080001f0 <Interrupt_Mask_Enable>:

static void Interrupt_Mask_Enable(uint8_t pin_no)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |=(1U<<pin_no);
 80001fa:	4b07      	ldr	r3, [pc, #28]	; (8000218 <Interrupt_Mask_Enable+0x28>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2101      	movs	r1, #1
 8000202:	fa01 f303 	lsl.w	r3, r1, r3
 8000206:	4904      	ldr	r1, [pc, #16]	; (8000218 <Interrupt_Mask_Enable+0x28>)
 8000208:	4313      	orrs	r3, r2
 800020a:	600b      	str	r3, [r1, #0]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40010400 	.word	0x40010400

0800021c <Interrupt_Setting>:


static void Interrupt_Setting(uint8_t pin_no,uint8_t edge,void(*ptrTofun)(void))
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	603a      	str	r2, [r7, #0]
 8000226:	71fb      	strb	r3, [r7, #7]
 8000228:	460b      	mov	r3, r1
 800022a:	71bb      	strb	r3, [r7, #6]
		Interrupt_Mask_Enable(pin_no);
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	4618      	mov	r0, r3
 8000230:	f7ff ffde 	bl	80001f0 <Interrupt_Mask_Enable>
		External_Interrupt_Edge_Selector(pin_no, edge);
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4611      	mov	r1, r2
 800023a:	4618      	mov	r0, r3
 800023c:	f7ff ff86 	bl	800014c <External_Interrupt_Edge_Selector>
		ptrToIRQx[pin_no] = ptrTofun;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4906      	ldr	r1, [pc, #24]	; (800025c <Interrupt_Setting+0x40>)
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Enable_IRQx(pin_no);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f807 	bl	8000260 <Enable_IRQx>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000034 	.word	0x20000034

08000260 <Enable_IRQx>:
*    or pin_number(0~15);
* it returns nothing !
*/

void Enable_IRQx(uint8_t external_interrupt_line)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if(external_interrupt_line == 0)
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d106      	bne.n	800027e <Enable_IRQx+0x1e>
		{NVIC_ISER0 |= (NVIC_EXTI0);}
 8000270:	4b26      	ldr	r3, [pc, #152]	; (800030c <Enable_IRQx+0xac>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a25      	ldr	r2, [pc, #148]	; (800030c <Enable_IRQx+0xac>)
 8000276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800027a:	6013      	str	r3, [r2, #0]
	else if((external_interrupt_line >=5) && (external_interrupt_line<=9))
		{NVIC_ISER0 |= (NVIC_EXTI5_9);}
	else if((external_interrupt_line >=10) && (external_interrupt_line<=15))
		{NVIC_ISER1 |= (NVIC_EXTI10_15);}
	else{}
}
 800027c:	e040      	b.n	8000300 <Enable_IRQx+0xa0>
	else if(external_interrupt_line == 1)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d106      	bne.n	8000292 <Enable_IRQx+0x32>
		{NVIC_ISER0 |= (NVIC_EXTI1);}
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <Enable_IRQx+0xac>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a20      	ldr	r2, [pc, #128]	; (800030c <Enable_IRQx+0xac>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	e036      	b.n	8000300 <Enable_IRQx+0xa0>
	else if(external_interrupt_line ==2)
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b02      	cmp	r3, #2
 8000296:	d106      	bne.n	80002a6 <Enable_IRQx+0x46>
		{NVIC_ISER0 |= (NVIC_EXTI2);}
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <Enable_IRQx+0xac>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <Enable_IRQx+0xac>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	e02c      	b.n	8000300 <Enable_IRQx+0xa0>
	else if(external_interrupt_line ==3)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d106      	bne.n	80002ba <Enable_IRQx+0x5a>
		{NVIC_ISER0 |= (NVIC_EXTI3);}
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <Enable_IRQx+0xac>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <Enable_IRQx+0xac>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	e022      	b.n	8000300 <Enable_IRQx+0xa0>
	else if(external_interrupt_line ==4)
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d106      	bne.n	80002ce <Enable_IRQx+0x6e>
		{NVIC_ISER0 |= (NVIC_EXTI4);}
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <Enable_IRQx+0xac>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <Enable_IRQx+0xac>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	e018      	b.n	8000300 <Enable_IRQx+0xa0>
	else if((external_interrupt_line >=5) && (external_interrupt_line<=9))
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	d909      	bls.n	80002e8 <Enable_IRQx+0x88>
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b09      	cmp	r3, #9
 80002d8:	d806      	bhi.n	80002e8 <Enable_IRQx+0x88>
		{NVIC_ISER0 |= (NVIC_EXTI5_9);}
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <Enable_IRQx+0xac>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <Enable_IRQx+0xac>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
}
 80002e6:	e00b      	b.n	8000300 <Enable_IRQx+0xa0>
	else if((external_interrupt_line >=10) && (external_interrupt_line<=15))
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	d908      	bls.n	8000300 <Enable_IRQx+0xa0>
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b0f      	cmp	r3, #15
 80002f2:	d805      	bhi.n	8000300 <Enable_IRQx+0xa0>
		{NVIC_ISER1 |= (NVIC_EXTI10_15);}
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <Enable_IRQx+0xb0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <Enable_IRQx+0xb0>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fe:	6013      	str	r3, [r2, #0]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e100 	.word	0xe000e100
 8000310:	e000e104 	.word	0xe000e104

08000314 <Disable_IRQx>:
* 1. external_interrupt_line   >>>  according to (Disable_IRQx & Enable_IRQx MACROs)
*                                   or (GPIO_PINx_MACROs)
* it returns nothing !
*/
void Disable_IRQx(uint8_t external_interrupt_line)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
			 if(external_interrupt_line == 0)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <Disable_IRQx+0x1e>
			{NVIC_ICER0 |= (NVIC_EXTI0);}
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <Disable_IRQx+0xac>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <Disable_IRQx+0xac>)
 800032a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032e:	6013      	str	r3, [r2, #0]
			{NVIC_ICER0 |= (NVIC_EXTI5_9);}
		else if((external_interrupt_line >=10) && (external_interrupt_line<=15))
			{NVIC_ICER1 |= (NVIC_EXTI10_15);}
		else {}

}
 8000330:	e040      	b.n	80003b4 <Disable_IRQx+0xa0>
		else if(external_interrupt_line == 1)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d106      	bne.n	8000346 <Disable_IRQx+0x32>
			{NVIC_ICER0 |= (NVIC_EXTI1);}
 8000338:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <Disable_IRQx+0xac>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <Disable_IRQx+0xac>)
 800033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	e036      	b.n	80003b4 <Disable_IRQx+0xa0>
		else if(external_interrupt_line ==2)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d106      	bne.n	800035a <Disable_IRQx+0x46>
			{NVIC_ICER0 |= (NVIC_EXTI2);}
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <Disable_IRQx+0xac>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <Disable_IRQx+0xac>)
 8000352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	e02c      	b.n	80003b4 <Disable_IRQx+0xa0>
		else if(external_interrupt_line ==3)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b03      	cmp	r3, #3
 800035e:	d106      	bne.n	800036e <Disable_IRQx+0x5a>
			{NVIC_ICER0 |= (NVIC_EXTI3);}
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <Disable_IRQx+0xac>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <Disable_IRQx+0xac>)
 8000366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	e022      	b.n	80003b4 <Disable_IRQx+0xa0>
		else if(external_interrupt_line ==4)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d106      	bne.n	8000382 <Disable_IRQx+0x6e>
			{NVIC_ICER0 |= (NVIC_EXTI4);}
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <Disable_IRQx+0xac>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <Disable_IRQx+0xac>)
 800037a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800037e:	6013      	str	r3, [r2, #0]
}
 8000380:	e018      	b.n	80003b4 <Disable_IRQx+0xa0>
		else if((external_interrupt_line >=5) && (external_interrupt_line<=9))
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2b04      	cmp	r3, #4
 8000386:	d909      	bls.n	800039c <Disable_IRQx+0x88>
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b09      	cmp	r3, #9
 800038c:	d806      	bhi.n	800039c <Disable_IRQx+0x88>
			{NVIC_ICER0 |= (NVIC_EXTI5_9);}
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <Disable_IRQx+0xac>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <Disable_IRQx+0xac>)
 8000394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000398:	6013      	str	r3, [r2, #0]
}
 800039a:	e00b      	b.n	80003b4 <Disable_IRQx+0xa0>
		else if((external_interrupt_line >=10) && (external_interrupt_line<=15))
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d908      	bls.n	80003b4 <Disable_IRQx+0xa0>
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b0f      	cmp	r3, #15
 80003a6:	d805      	bhi.n	80003b4 <Disable_IRQx+0xa0>
			{NVIC_ICER1 |= (NVIC_EXTI10_15);}
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <Disable_IRQx+0xb0>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <Disable_IRQx+0xb0>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000e180 	.word	0xe000e180
 80003c4:	e000e184 	.word	0xe000e184

080003c8 <External_Interrupt_Init>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void External_Interrupt_Init(volatile GPIO_t *PORT,uint8_t pin_no,uint8_t edge,void(*ptrTofun)(void))
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	460b      	mov	r3, r1
 80003d4:	72fb      	strb	r3, [r7, #11]
 80003d6:	4613      	mov	r3, r2
 80003d8:	72bb      	strb	r3, [r7, #10]
	//port init
	GPIO_Init_Input_Pin(PORT,pin_no,INPUT_FLOATING,0);
 80003da:	7af9      	ldrb	r1, [r7, #11]
 80003dc:	2300      	movs	r3, #0
 80003de:	2204      	movs	r2, #4
 80003e0:	68f8      	ldr	r0, [r7, #12]
 80003e2:	f000 fac5 	bl	8000970 <GPIO_Init_Input_Pin>


	//select source of interrupt
	if(pin_no >=0 && pin_no<=3)
 80003e6:	7afb      	ldrb	r3, [r7, #11]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d843      	bhi.n	8000474 <External_Interrupt_Init+0xac>
	{
		AFIO->EXTICR1 &= ~(0b0000 << ( pin_no * 4) );
 80003ec:	4b7a      	ldr	r3, [pc, #488]	; (80005d8 <External_Interrupt_Init+0x210>)
 80003ee:	4a7a      	ldr	r2, [pc, #488]	; (80005d8 <External_Interrupt_Init+0x210>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	6093      	str	r3, [r2, #8]
			 if(PORT==GPIOA){AFIO->EXTICR1 &= ~(0b0000 << ( pin_no * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4a79      	ldr	r2, [pc, #484]	; (80005dc <External_Interrupt_Init+0x214>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d10a      	bne.n	8000412 <External_Interrupt_Init+0x4a>
 80003fc:	4b76      	ldr	r3, [pc, #472]	; (80005d8 <External_Interrupt_Init+0x210>)
 80003fe:	4a76      	ldr	r2, [pc, #472]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	6093      	str	r3, [r2, #8]
 8000404:	7ab9      	ldrb	r1, [r7, #10]
 8000406:	7afb      	ldrb	r3, [r7, #11]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff06 	bl	800021c <Interrupt_Setting>
		else if(PORT==GPIOB){AFIO->EXTICR4 |=(0b0001 << ( (pin_no-12) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
		else if(PORT==GPIOC && pin_no !=12){AFIO->EXTICR4 |=(0b0010 << ( (pin_no-12) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
		//else if(PORT==GPIOD){AFIO->EXTICR4 |=(0b0011 << ( (pin_no-12) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
	}
	else{}
}
 8000410:	e0de      	b.n	80005d0 <External_Interrupt_Init+0x208>
		else if(PORT==GPIOB){AFIO->EXTICR1 |=(0b0001 << ( pin_no * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	4a72      	ldr	r2, [pc, #456]	; (80005e0 <External_Interrupt_Init+0x218>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d111      	bne.n	800043e <External_Interrupt_Init+0x76>
 800041a:	4b6f      	ldr	r3, [pc, #444]	; (80005d8 <External_Interrupt_Init+0x210>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	7afa      	ldrb	r2, [r7, #11]
 8000420:	0092      	lsls	r2, r2, #2
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a6b      	ldr	r2, [pc, #428]	; (80005d8 <External_Interrupt_Init+0x210>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	7ab9      	ldrb	r1, [r7, #10]
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff fef0 	bl	800021c <Interrupt_Setting>
}
 800043c:	e0c8      	b.n	80005d0 <External_Interrupt_Init+0x208>
		else if(PORT==GPIOD && pin_no<=1){AFIO->EXTICR1 |=(0b0011 << ( pin_no * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	4a68      	ldr	r2, [pc, #416]	; (80005e4 <External_Interrupt_Init+0x21c>)
 8000442:	4293      	cmp	r3, r2
 8000444:	f040 80c4 	bne.w	80005d0 <External_Interrupt_Init+0x208>
 8000448:	7afb      	ldrb	r3, [r7, #11]
 800044a:	2b01      	cmp	r3, #1
 800044c:	f200 80c0 	bhi.w	80005d0 <External_Interrupt_Init+0x208>
 8000450:	4b61      	ldr	r3, [pc, #388]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	7afa      	ldrb	r2, [r7, #11]
 8000456:	0092      	lsls	r2, r2, #2
 8000458:	2103      	movs	r1, #3
 800045a:	fa01 f202 	lsl.w	r2, r1, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a5d      	ldr	r2, [pc, #372]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000462:	430b      	orrs	r3, r1
 8000464:	6093      	str	r3, [r2, #8]
 8000466:	7ab9      	ldrb	r1, [r7, #10]
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fed5 	bl	800021c <Interrupt_Setting>
}
 8000472:	e0ad      	b.n	80005d0 <External_Interrupt_Init+0x208>
	else if(pin_no >=4 && pin_no<=7)
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d92d      	bls.n	80004d6 <External_Interrupt_Init+0x10e>
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d82a      	bhi.n	80004d6 <External_Interrupt_Init+0x10e>
		AFIO->EXTICR2 &= ~(0b0000 << ( (pin_no-4) * 4) );
 8000480:	4b55      	ldr	r3, [pc, #340]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000482:	4a55      	ldr	r2, [pc, #340]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	60d3      	str	r3, [r2, #12]
			 if(PORT==GPIOA){AFIO->EXTICR2 &= ~(0b0000 << ( (pin_no-4) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	4a54      	ldr	r2, [pc, #336]	; (80005dc <External_Interrupt_Init+0x214>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d10a      	bne.n	80004a6 <External_Interrupt_Init+0xde>
 8000490:	4b51      	ldr	r3, [pc, #324]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000492:	4a51      	ldr	r2, [pc, #324]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	60d3      	str	r3, [r2, #12]
 8000498:	7ab9      	ldrb	r1, [r7, #10]
 800049a:	7afb      	ldrb	r3, [r7, #11]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff febc 	bl	800021c <Interrupt_Setting>
 80004a4:	e091      	b.n	80005ca <External_Interrupt_Init+0x202>
		else if(PORT==GPIOB){AFIO->EXTICR2 |=(0b0001 << ( (pin_no-4) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	4a4d      	ldr	r2, [pc, #308]	; (80005e0 <External_Interrupt_Init+0x218>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	f040 808d 	bne.w	80005ca <External_Interrupt_Init+0x202>
 80004b0:	4b49      	ldr	r3, [pc, #292]	; (80005d8 <External_Interrupt_Init+0x210>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	7afa      	ldrb	r2, [r7, #11]
 80004b6:	3a04      	subs	r2, #4
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	2101      	movs	r1, #1
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a45      	ldr	r2, [pc, #276]	; (80005d8 <External_Interrupt_Init+0x210>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	60d3      	str	r3, [r2, #12]
 80004c8:	7ab9      	ldrb	r1, [r7, #10]
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fea4 	bl	800021c <Interrupt_Setting>
			 if(PORT==GPIOA){AFIO->EXTICR2 &= ~(0b0000 << ( (pin_no-4) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 80004d4:	e079      	b.n	80005ca <External_Interrupt_Init+0x202>
	else if(pin_no >=8 && pin_no<=11)
 80004d6:	7afb      	ldrb	r3, [r7, #11]
 80004d8:	2b07      	cmp	r3, #7
 80004da:	d92c      	bls.n	8000536 <External_Interrupt_Init+0x16e>
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	2b0b      	cmp	r3, #11
 80004e0:	d829      	bhi.n	8000536 <External_Interrupt_Init+0x16e>
		AFIO->EXTICR3 &= ~(0b0000 << ( (pin_no-8) * 4) );
 80004e2:	4b3d      	ldr	r3, [pc, #244]	; (80005d8 <External_Interrupt_Init+0x210>)
 80004e4:	4a3c      	ldr	r2, [pc, #240]	; (80005d8 <External_Interrupt_Init+0x210>)
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	6113      	str	r3, [r2, #16]
			 if(PORT==GPIOA){AFIO->EXTICR3 &= ~(0b0000 << ( (pin_no-8) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	4a3b      	ldr	r2, [pc, #236]	; (80005dc <External_Interrupt_Init+0x214>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d10a      	bne.n	8000508 <External_Interrupt_Init+0x140>
 80004f2:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <External_Interrupt_Init+0x210>)
 80004f4:	4a38      	ldr	r2, [pc, #224]	; (80005d8 <External_Interrupt_Init+0x210>)
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	6113      	str	r3, [r2, #16]
 80004fa:	7ab9      	ldrb	r1, [r7, #10]
 80004fc:	7afb      	ldrb	r3, [r7, #11]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe8b 	bl	800021c <Interrupt_Setting>
 8000506:	e062      	b.n	80005ce <External_Interrupt_Init+0x206>
		else if(PORT==GPIOB){AFIO->EXTICR3 |=(0b0001 << ( (pin_no-8) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a35      	ldr	r2, [pc, #212]	; (80005e0 <External_Interrupt_Init+0x218>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d15e      	bne.n	80005ce <External_Interrupt_Init+0x206>
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	7afa      	ldrb	r2, [r7, #11]
 8000516:	3a08      	subs	r2, #8
 8000518:	0092      	lsls	r2, r2, #2
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6113      	str	r3, [r2, #16]
 8000528:	7ab9      	ldrb	r1, [r7, #10]
 800052a:	7afb      	ldrb	r3, [r7, #11]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe74 	bl	800021c <Interrupt_Setting>
			 if(PORT==GPIOA){AFIO->EXTICR3 &= ~(0b0000 << ( (pin_no-8) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 8000534:	e04b      	b.n	80005ce <External_Interrupt_Init+0x206>
	else if(pin_no >=12 && pin_no<=15)
 8000536:	7afb      	ldrb	r3, [r7, #11]
 8000538:	2b0b      	cmp	r3, #11
 800053a:	d949      	bls.n	80005d0 <External_Interrupt_Init+0x208>
 800053c:	7afb      	ldrb	r3, [r7, #11]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d846      	bhi.n	80005d0 <External_Interrupt_Init+0x208>
		AFIO->EXTICR4 &= ~(0b0000 << ( (pin_no-12) * 4) );
 8000542:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000544:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	6153      	str	r3, [r2, #20]
			 if(PORT==GPIOA){AFIO->EXTICR4 &= ~(0b0000 << ( (pin_no-12) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4a23      	ldr	r2, [pc, #140]	; (80005dc <External_Interrupt_Init+0x214>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10a      	bne.n	8000568 <External_Interrupt_Init+0x1a0>
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	7ab9      	ldrb	r1, [r7, #10]
 800055c:	7afb      	ldrb	r3, [r7, #11]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe5b 	bl	800021c <Interrupt_Setting>
}
 8000566:	e033      	b.n	80005d0 <External_Interrupt_Init+0x208>
		else if(PORT==GPIOB){AFIO->EXTICR4 |=(0b0001 << ( (pin_no-12) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <External_Interrupt_Init+0x218>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d112      	bne.n	8000596 <External_Interrupt_Init+0x1ce>
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	7afa      	ldrb	r2, [r7, #11]
 8000576:	3a0c      	subs	r2, #12
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	2101      	movs	r1, #1
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <External_Interrupt_Init+0x210>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6153      	str	r3, [r2, #20]
 8000588:	7ab9      	ldrb	r1, [r7, #10]
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe44 	bl	800021c <Interrupt_Setting>
}
 8000594:	e01c      	b.n	80005d0 <External_Interrupt_Init+0x208>
		else if(PORT==GPIOC && pin_no !=12){AFIO->EXTICR4 |=(0b0010 << ( (pin_no-12) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <External_Interrupt_Init+0x220>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d118      	bne.n	80005d0 <External_Interrupt_Init+0x208>
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	2b0c      	cmp	r3, #12
 80005a2:	d015      	beq.n	80005d0 <External_Interrupt_Init+0x208>
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <External_Interrupt_Init+0x210>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	7afa      	ldrb	r2, [r7, #11]
 80005aa:	3a0c      	subs	r2, #12
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	2102      	movs	r1, #2
 80005b0:	fa01 f202 	lsl.w	r2, r1, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <External_Interrupt_Init+0x210>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6153      	str	r3, [r2, #20]
 80005bc:	7ab9      	ldrb	r1, [r7, #10]
 80005be:	7afb      	ldrb	r3, [r7, #11]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe2a 	bl	800021c <Interrupt_Setting>
}
 80005c8:	e002      	b.n	80005d0 <External_Interrupt_Init+0x208>
			 if(PORT==GPIOA){AFIO->EXTICR2 &= ~(0b0000 << ( (pin_no-4) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 80005ca:	bf00      	nop
 80005cc:	e000      	b.n	80005d0 <External_Interrupt_Init+0x208>
			 if(PORT==GPIOA){AFIO->EXTICR3 &= ~(0b0000 << ( (pin_no-8) * 4) );Interrupt_Setting(pin_no, edge, ptrTofun);}
 80005ce:	bf00      	nop
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40010000 	.word	0x40010000
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40011400 	.word	0x40011400
 80005e8:	40011000 	.word	0x40011000

080005ec <External_Interrupt_Reset>:
* this function resets, disables all external interrupt.
* INPUTS : it takes nothing .
*		   it returns nothing !
*/
void External_Interrupt_Reset(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	EXTI->EMR   = 0x00000000;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <External_Interrupt_Reset+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
	EXTI->EMR   = 0x00000000;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <External_Interrupt_Reset+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
	EXTI->FTSR  = 0x00000000;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <External_Interrupt_Reset+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
	EXTI->RTSR  = 0x00000000;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <External_Interrupt_Reset+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
	EXTI->SWIER = 0x00000000;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <External_Interrupt_Reset+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
	EXTI->PR    = 0xffffffff;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <External_Interrupt_Reset+0x58>)
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	615a      	str	r2, [r3, #20]

	//disable all IRQs from NVIC
	Disable_IRQx(0);
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fe7c 	bl	8000314 <Disable_IRQx>
	Disable_IRQx(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff fe79 	bl	8000314 <Disable_IRQx>
	Disable_IRQx(2);
 8000622:	2002      	movs	r0, #2
 8000624:	f7ff fe76 	bl	8000314 <Disable_IRQx>
	Disable_IRQx(3);
 8000628:	2003      	movs	r0, #3
 800062a:	f7ff fe73 	bl	8000314 <Disable_IRQx>
	Disable_IRQx(4);
 800062e:	2004      	movs	r0, #4
 8000630:	f7ff fe70 	bl	8000314 <Disable_IRQx>
	Disable_IRQx(5);
 8000634:	2005      	movs	r0, #5
 8000636:	f7ff fe6d 	bl	8000314 <Disable_IRQx>
	Disable_IRQx(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f7ff fe6a 	bl	8000314 <Disable_IRQx>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40010400 	.word	0x40010400

08000648 <Software_Interrupt_Trigger>:
* INPUTS : it takes 1 argument :
* 1. pin_no        >>>  according to MACROs (GPIO_PINx_MACROs)
* it returns nothing !
*/
void Software_Interrupt_Trigger(uint8_t pin_no,void(*ptrTofun)(void))
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
	if(pin_no>=0 && pin_no<=15)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b0f      	cmp	r3, #15
 8000658:	d812      	bhi.n	8000680 <Software_Interrupt_Trigger+0x38>
	{
	ptrToIRQx[pin_no] = ptrTofun;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	490a      	ldr	r1, [pc, #40]	; (8000688 <Software_Interrupt_Trigger+0x40>)
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Interrupt_Mask_Enable(pin_no);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdc2 	bl	80001f0 <Interrupt_Mask_Enable>
	Enable_IRQx(pin_no);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fdf6 	bl	8000260 <Enable_IRQx>
	EXTI->SWIER =(1U<<pin_no);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <Software_Interrupt_Trigger+0x44>)
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	6113      	str	r3, [r2, #16]
	}
	else {}
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000034 	.word	0x20000034
 800068c:	40010400 	.word	0x40010400

08000690 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1U<<0))
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <EXTI0_IRQHandler+0x2c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00b      	beq.n	80006b8 <EXTI0_IRQHandler+0x28>
			{
		EXTI->PR |= (1U<<0);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <EXTI0_IRQHandler+0x2c>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <EXTI0_IRQHandler+0x2c>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6153      	str	r3, [r2, #20]
		External_Interrupt_Line = 0;
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <EXTI0_IRQHandler+0x30>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
		ptrToIRQx[0]();
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <EXTI0_IRQHandler+0x34>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4798      	blx	r3
		/***ISR0 HERE***/
			}
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000034 	.word	0x20000034

080006c8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1U<<1))
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <EXTI1_IRQHandler+0x2c>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00b      	beq.n	80006f0 <EXTI1_IRQHandler+0x28>
			{
		EXTI->PR |= (1U<<1);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <EXTI1_IRQHandler+0x2c>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <EXTI1_IRQHandler+0x2c>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	6153      	str	r3, [r2, #20]
		External_Interrupt_Line = 1;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <EXTI1_IRQHandler+0x30>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
		ptrToIRQx[1]();
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <EXTI1_IRQHandler+0x34>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4798      	blx	r3
		/***ISR1 HERE***/
			}
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40010400 	.word	0x40010400
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000034 	.word	0x20000034

08000700 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1U<<2))
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <EXTI2_IRQHandler+0x2c>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00b      	beq.n	8000728 <EXTI2_IRQHandler+0x28>
			{
		EXTI->PR |= (1U<<2);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <EXTI2_IRQHandler+0x2c>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <EXTI2_IRQHandler+0x2c>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6153      	str	r3, [r2, #20]
		External_Interrupt_Line = 2;
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <EXTI2_IRQHandler+0x30>)
 800071e:	2202      	movs	r2, #2
 8000720:	601a      	str	r2, [r3, #0]
		ptrToIRQx[2]();
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <EXTI2_IRQHandler+0x34>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4798      	blx	r3
		/***ISR2 HERE***/
			}
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010400 	.word	0x40010400
 8000730:	20000000 	.word	0x20000000
 8000734:	20000034 	.word	0x20000034

08000738 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1U<<3))
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <EXTI3_IRQHandler+0x2c>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00b      	beq.n	8000760 <EXTI3_IRQHandler+0x28>
			{
		EXTI->PR |= (1U<<3);
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <EXTI3_IRQHandler+0x2c>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <EXTI3_IRQHandler+0x2c>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6153      	str	r3, [r2, #20]
		External_Interrupt_Line = 3;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <EXTI3_IRQHandler+0x30>)
 8000756:	2203      	movs	r2, #3
 8000758:	601a      	str	r2, [r3, #0]
		ptrToIRQx[3]();
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <EXTI3_IRQHandler+0x34>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4798      	blx	r3
		/***ISR3 HERE***/
			}
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40010400 	.word	0x40010400
 8000768:	20000000 	.word	0x20000000
 800076c:	20000034 	.word	0x20000034

08000770 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
		if(EXTI->PR & (1U<<4))
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <EXTI4_IRQHandler+0x2c>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00b      	beq.n	8000798 <EXTI4_IRQHandler+0x28>
		{
		External_Interrupt_Line = 4;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <EXTI4_IRQHandler+0x30>)
 8000782:	2204      	movs	r2, #4
 8000784:	601a      	str	r2, [r3, #0]
		EXTI->PR |= (1U<<4);
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <EXTI4_IRQHandler+0x2c>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <EXTI4_IRQHandler+0x2c>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6153      	str	r3, [r2, #20]
		ptrToIRQx[4]();
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <EXTI4_IRQHandler+0x34>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	4798      	blx	r3
		/***ISR4 HERE***/
		}

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010400 	.word	0x40010400
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000034 	.word	0x20000034

080007a8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	     if (EXTI->PR & (1U<<5)) {EXTI->PR |= (1U<<5);External_Interrupt_Line = 5;ptrToIRQx[5]();/**ISR5 CODE HERE***/}
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f003 0320 	and.w	r3, r3, #32
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00c      	beq.n	80007d2 <EXTI9_5_IRQHandler+0x2a>
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007be:	f043 0320 	orr.w	r3, r3, #32
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <EXTI9_5_IRQHandler+0xc8>)
 80007c6:	2205      	movs	r2, #5
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <EXTI9_5_IRQHandler+0xcc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4798      	blx	r3
	else if (EXTI->PR & (1U<<6)) {EXTI->PR |= (1U<<6);External_Interrupt_Line = 6;ptrToIRQx[6]();/**ISR6 CODE HERE***/}
	else if (EXTI->PR & (1U<<7)) {EXTI->PR |= (1U<<7);External_Interrupt_Line = 7;ptrToIRQx[7]();/**ISR7 CODE HERE***/}
	else if (EXTI->PR & (1U<<8)) {EXTI->PR |= (1U<<8);External_Interrupt_Line = 8;ptrToIRQx[8]();/**ISR8 CODE HERE***/}
	else if (EXTI->PR & (1U<<9)) {EXTI->PR |= (1U<<9);External_Interrupt_Line = 9;ptrToIRQx[9]();/**ISR9 CODE HERE***/}

}
 80007d0:	e04a      	b.n	8000868 <EXTI9_5_IRQHandler+0xc0>
	else if (EXTI->PR & (1U<<6)) {EXTI->PR |= (1U<<6);External_Interrupt_Line = 6;ptrToIRQx[6]();/**ISR6 CODE HERE***/}
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00c      	beq.n	80007f8 <EXTI9_5_IRQHandler+0x50>
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <EXTI9_5_IRQHandler+0xc8>)
 80007ec:	2206      	movs	r2, #6
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <EXTI9_5_IRQHandler+0xcc>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4798      	blx	r3
}
 80007f6:	e037      	b.n	8000868 <EXTI9_5_IRQHandler+0xc0>
	else if (EXTI->PR & (1U<<7)) {EXTI->PR |= (1U<<7);External_Interrupt_Line = 7;ptrToIRQx[7]();/**ISR7 CODE HERE***/}
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00c      	beq.n	800081e <EXTI9_5_IRQHandler+0x76>
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 800080a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <EXTI9_5_IRQHandler+0xc8>)
 8000812:	2207      	movs	r2, #7
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <EXTI9_5_IRQHandler+0xcc>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4798      	blx	r3
}
 800081c:	e024      	b.n	8000868 <EXTI9_5_IRQHandler+0xc0>
	else if (EXTI->PR & (1U<<8)) {EXTI->PR |= (1U<<8);External_Interrupt_Line = 8;ptrToIRQx[8]();/**ISR8 CODE HERE***/}
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00c      	beq.n	8000844 <EXTI9_5_IRQHandler+0x9c>
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 8000830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <EXTI9_5_IRQHandler+0xc8>)
 8000838:	2208      	movs	r2, #8
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <EXTI9_5_IRQHandler+0xcc>)
 800083e:	6a1b      	ldr	r3, [r3, #32]
 8000840:	4798      	blx	r3
}
 8000842:	e011      	b.n	8000868 <EXTI9_5_IRQHandler+0xc0>
	else if (EXTI->PR & (1U<<9)) {EXTI->PR |= (1U<<9);External_Interrupt_Line = 9;ptrToIRQx[9]();/**ISR9 CODE HERE***/}
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00b      	beq.n	8000868 <EXTI9_5_IRQHandler+0xc0>
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <EXTI9_5_IRQHandler+0xc4>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	6153      	str	r3, [r2, #20]
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <EXTI9_5_IRQHandler+0xc8>)
 800085e:	2209      	movs	r2, #9
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <EXTI9_5_IRQHandler+0xcc>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	4798      	blx	r3
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40010400 	.word	0x40010400
 8000870:	20000000 	.word	0x20000000
 8000874:	20000034 	.word	0x20000034

08000878 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	      if (EXTI->PR & (1U<<10)){EXTI->PR |= (1U<<10);External_Interrupt_Line = 10;ptrToIRQx[10]();/**ISR10 CODE HERE***/}
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00c      	beq.n	80008a2 <EXTI15_10_IRQHandler+0x2a>
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	4a35      	ldr	r2, [pc, #212]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 800088e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000892:	6153      	str	r3, [r2, #20]
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <EXTI15_10_IRQHandler+0xf0>)
 8000896:	220a      	movs	r2, #10
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <EXTI15_10_IRQHandler+0xf4>)
 800089c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089e:	4798      	blx	r3
	 else if (EXTI->PR & (1U<<12)){EXTI->PR |= (1U<<12);External_Interrupt_Line = 12;ptrToIRQx[12]();/**ISR12 CODE HERE***/}
	 else if (EXTI->PR & (1U<<13)){EXTI->PR |= (1U<<13);External_Interrupt_Line = 13;ptrToIRQx[13]();/**ISR13 CODE HERE***/}
     else if (EXTI->PR & (1U<<14)){EXTI->PR |= (1U<<14);External_Interrupt_Line = 14;ptrToIRQx[14]();/**ISR14 CODE HERE***/}
     else if (EXTI->PR & (1U<<15)){EXTI->PR |= (1U<<15);External_Interrupt_Line = 15;ptrToIRQx[15]();/**ISR15 CODE HERE***/}

}
 80008a0:	e05d      	b.n	800095e <EXTI15_10_IRQHandler+0xe6>
	 else if (EXTI->PR & (1U<<11)){EXTI->PR |= (1U<<11);External_Interrupt_Line = 11;ptrToIRQx[11]();/**ISR11 CODE HERE***/}
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00c      	beq.n	80008c8 <EXTI15_10_IRQHandler+0x50>
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <EXTI15_10_IRQHandler+0xf0>)
 80008bc:	220b      	movs	r2, #11
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <EXTI15_10_IRQHandler+0xf4>)
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	4798      	blx	r3
}
 80008c6:	e04a      	b.n	800095e <EXTI15_10_IRQHandler+0xe6>
	 else if (EXTI->PR & (1U<<12)){EXTI->PR |= (1U<<12);External_Interrupt_Line = 12;ptrToIRQx[12]();/**ISR12 CODE HERE***/}
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00c      	beq.n	80008ee <EXTI15_10_IRQHandler+0x76>
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008de:	6153      	str	r3, [r2, #20]
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <EXTI15_10_IRQHandler+0xf0>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <EXTI15_10_IRQHandler+0xf4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4798      	blx	r3
}
 80008ec:	e037      	b.n	800095e <EXTI15_10_IRQHandler+0xe6>
	 else if (EXTI->PR & (1U<<13)){EXTI->PR |= (1U<<13);External_Interrupt_Line = 13;ptrToIRQx[13]();/**ISR13 CODE HERE***/}
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00c      	beq.n	8000914 <EXTI15_10_IRQHandler+0x9c>
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 8000900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <EXTI15_10_IRQHandler+0xf0>)
 8000908:	220d      	movs	r2, #13
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <EXTI15_10_IRQHandler+0xf4>)
 800090e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000910:	4798      	blx	r3
}
 8000912:	e024      	b.n	800095e <EXTI15_10_IRQHandler+0xe6>
     else if (EXTI->PR & (1U<<14)){EXTI->PR |= (1U<<14);External_Interrupt_Line = 14;ptrToIRQx[14]();/**ISR14 CODE HERE***/}
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00c      	beq.n	800093a <EXTI15_10_IRQHandler+0xc2>
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6153      	str	r3, [r2, #20]
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <EXTI15_10_IRQHandler+0xf0>)
 800092e:	220e      	movs	r2, #14
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <EXTI15_10_IRQHandler+0xf4>)
 8000934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000936:	4798      	blx	r3
}
 8000938:	e011      	b.n	800095e <EXTI15_10_IRQHandler+0xe6>
     else if (EXTI->PR & (1U<<15)){EXTI->PR |= (1U<<15);External_Interrupt_Line = 15;ptrToIRQx[15]();/**ISR15 CODE HERE***/}
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00b      	beq.n	800095e <EXTI15_10_IRQHandler+0xe6>
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <EXTI15_10_IRQHandler+0xec>)
 800094c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <EXTI15_10_IRQHandler+0xf0>)
 8000954:	220f      	movs	r2, #15
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <EXTI15_10_IRQHandler+0xf4>)
 800095a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800095c:	4798      	blx	r3
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010400 	.word	0x40010400
 8000968:	20000000 	.word	0x20000000
 800096c:	20000034 	.word	0x20000034

08000970 <GPIO_Init_Input_Pin>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Init_Input_Pin(volatile GPIO_t  *PORT,unsigned pin,unsigned input_mode,unsigned up_down)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
	//PULL UP - PULL DOWN - FLOATING _ANALOG
		 	  if((pin>=0) && (pin<=7))  {PORT->CRL &= ~(0xf<<(4*pin));PORT->CRL |=(input_mode<<(4*pin));}
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d815      	bhi.n	80009b0 <GPIO_Init_Input_Pin+0x40>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	210f      	movs	r1, #15
 800098e:	fa01 f202 	lsl.w	r2, r1, r2
 8000992:	43d2      	mvns	r2, r2
 8000994:	401a      	ands	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	431a      	orrs	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e020      	b.n	80009f2 <GPIO_Init_Input_Pin+0x82>
		 else if((pin>=8) && (pin<=15)) {PORT->CRH &= ~(0xf<<(4*(pin-8)));PORT->CRH |=(input_mode<<(4*(pin-8)));}
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d91d      	bls.n	80009f2 <GPIO_Init_Input_Pin+0x82>
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d81a      	bhi.n	80009f2 <GPIO_Init_Input_Pin+0x82>
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009c6:	3b08      	subs	r3, #8
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	210f      	movs	r1, #15
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	401a      	ands	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009e2:	3b08      	subs	r3, #8
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	431a      	orrs	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	605a      	str	r2, [r3, #4]
   //PULL UP - PULL DOWN
		 	 if(input_mode == INPUT_PULL_UP_DOWN)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d119      	bne.n	8000a2c <GPIO_Init_Input_Pin+0xbc>
		 	 	{
		if(up_down == DOWN)     PORT->ODR&= ~(BIT(pin));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10a      	bne.n	8000a14 <GPIO_Init_Input_Pin+0xa4>
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	2101      	movs	r1, #1
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	60da      	str	r2, [r3, #12]
		else if(up_down == UP)  PORT->ODR|=(BIT(pin));
		 	 	}
}
 8000a12:	e00b      	b.n	8000a2c <GPIO_Init_Input_Pin+0xbc>
		else if(up_down == UP)  PORT->ODR|=(BIT(pin));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d108      	bne.n	8000a2c <GPIO_Init_Input_Pin+0xbc>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	2101      	movs	r1, #1
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	431a      	orrs	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	60da      	str	r2, [r3, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <GPIO_Init_Output_Pin>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Init_Output_Pin(volatile GPIO_t  *PORT,unsigned pin,unsigned output_mode)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b085      	sub	sp, #20
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]

	  if((pin>=0) && (pin<=7)) {PORT->CRL &= ~(0xf<<(4*pin)); PORT->CRL |=(output_mode<<(4*pin));}
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d815      	bhi.n	8000a74 <GPIO_Init_Output_Pin+0x3e>
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	210f      	movs	r1, #15
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	43d2      	mvns	r2, r2
 8000a58:	401a      	ands	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	601a      	str	r2, [r3, #0]
 else if((pin>=8) && (pin<=15)){PORT->CRH &= ~(0xf<<(4*(pin-8))); PORT->CRH |=(output_mode<<(4*(pin-8)));}

}
 8000a72:	e020      	b.n	8000ab6 <GPIO_Init_Output_Pin+0x80>
 else if((pin>=8) && (pin<=15)){PORT->CRH &= ~(0xf<<(4*(pin-8))); PORT->CRH |=(output_mode<<(4*(pin-8)));}
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	d91d      	bls.n	8000ab6 <GPIO_Init_Output_Pin+0x80>
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d81a      	bhi.n	8000ab6 <GPIO_Init_Output_Pin+0x80>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a8a:	3b08      	subs	r3, #8
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	210f      	movs	r1, #15
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	401a      	ands	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <GPIO_Reset_Pin_Atomic>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Reset_Pin_Atomic(volatile GPIO_t  *PORT,unsigned pin)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	PORT->BRR = BIT(pin);
 8000aca:	2201      	movs	r2, #1
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	615a      	str	r2, [r3, #20]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <GPIO_Set_Pin>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Set_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	PORT->ODR |= (1<<pin);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2101      	movs	r1, #1
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	fa01 f202 	lsl.w	r2, r1, r2
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60da      	str	r2, [r3, #12]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <GPIO_Reset_Pin>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Reset_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	PORT->ODR &= ~(1<<pin);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	2101      	movs	r1, #1
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	43d2      	mvns	r2, r2
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60da      	str	r2, [r3, #12]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <GPIO_Toggle_Pin>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Toggle_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	PORT->ODR ^= (1<<pin);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	405a      	eors	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60da      	str	r2, [r3, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <GPIO_Set_pins>:
* 2. data     	 >>>  (0x0000~0xffff)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Set_pins(volatile GPIO_t  *PORT,unsigned GPIO_data)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	PORT->ODR |=(GPIO_data);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60da      	str	r2, [r3, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <GPIO_Reset_pins>:
* 2. data     	 >>>  (0x0000~0xffff)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Reset_pins(volatile GPIO_t  *PORT,unsigned GPIO_data)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	PORT->ODR &= ~(GPIO_data);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	401a      	ands	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60da      	str	r2, [r3, #12]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <GPIO_Init_All_Output>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Init_All_Output(volatile GPIO_t  *PORT,unsigned output_mode)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	PORT->CRL &= ~(0xffff);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	0c1b      	lsrs	r3, r3, #16
 8000ba4:	041b      	lsls	r3, r3, #16
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
	PORT->CRH &= ~(0xffff);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	0c1b      	lsrs	r3, r3, #16
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6053      	str	r3, [r2, #4]

	PORT->CRL = (output_mode);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	601a      	str	r2, [r3, #0]
	PORT->CRH = (output_mode);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <lcd_ENABLE_R_W_DATA>:


#include "lcd16.h"

static void lcd_ENABLE_R_W_DATA(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	LCD_PIN_HIGH(EN_PIN);
 8000bd2:	210d      	movs	r1, #13
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <lcd_ENABLE_R_W_DATA+0x34>)
 8000bd6:	f7ff ff82 	bl	8000ade <GPIO_Set_Pin>
	LCD_PIN_LOW(EN_PIN);
 8000bda:	210d      	movs	r1, #13
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <lcd_ENABLE_R_W_DATA+0x34>)
 8000bde:	f7ff ff91 	bl	8000b04 <GPIO_Reset_Pin>
	int i=0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
	for(;i<=1000;i++);
 8000be6:	e002      	b.n	8000bee <lcd_ENABLE_R_W_DATA+0x22>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bf4:	ddf8      	ble.n	8000be8 <lcd_ENABLE_R_W_DATA+0x1c>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40011000 	.word	0x40011000

08000c04 <lcd_start4Bit>:

static void lcd_start4Bit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	LCD_PORT_HIGH(0x02);
 8000c08:	21ff      	movs	r1, #255	; 0xff
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <lcd_start4Bit+0x3c>)
 8000c0c:	f7ff ffb1 	bl	8000b72 <GPIO_Reset_pins>
 8000c10:	2102      	movs	r1, #2
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <lcd_start4Bit+0x3c>)
 8000c14:	f7ff ff9d 	bl	8000b52 <GPIO_Set_pins>
 8000c18:	210f      	movs	r1, #15
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <lcd_start4Bit+0x40>)
 8000c1c:	f7ff ff72 	bl	8000b04 <GPIO_Reset_Pin>
 8000c20:	210e      	movs	r1, #14
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <lcd_start4Bit+0x40>)
 8000c24:	f7ff ff6e 	bl	8000b04 <GPIO_Reset_Pin>
	LCD_PIN_LOW(RS_PIN); LCD_PIN_LOW(RW_PIN);
 8000c28:	210f      	movs	r1, #15
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <lcd_start4Bit+0x40>)
 8000c2c:	f7ff ff6a 	bl	8000b04 <GPIO_Reset_Pin>
 8000c30:	210e      	movs	r1, #14
 8000c32:	4804      	ldr	r0, [pc, #16]	; (8000c44 <lcd_start4Bit+0x40>)
 8000c34:	f7ff ff66 	bl	8000b04 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 8000c38:	f7ff ffc8 	bl	8000bcc <lcd_ENABLE_R_W_DATA>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40011000 	.word	0x40011000

08000c48 <lcd_INIT>:

void lcd_INIT(char dots, char lines, char mode)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
	char _DOTS=0,_LINES=0,_MODE=0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73bb      	strb	r3, [r7, #14]
 8000c62:	2300      	movs	r3, #0
 8000c64:	737b      	strb	r3, [r7, #13]
	if(dots==8)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d102      	bne.n	8000c72 <lcd_INIT+0x2a>
		_DOTS= LCD_5X8_DOTS_COMMAND;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e004      	b.n	8000c7c <lcd_INIT+0x34>
	else if(dots==10)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b0a      	cmp	r3, #10
 8000c76:	d101      	bne.n	8000c7c <lcd_INIT+0x34>
		_DOTS= LCD_5X10_DOTS_COMMAND;
 8000c78:	2324      	movs	r3, #36	; 0x24
 8000c7a:	73fb      	strb	r3, [r7, #15]
	if(lines == 1)
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d102      	bne.n	8000c88 <lcd_INIT+0x40>
		_LINES=LCD_1_LINE_COMMAND;
 8000c82:	2320      	movs	r3, #32
 8000c84:	73bb      	strb	r3, [r7, #14]
 8000c86:	e004      	b.n	8000c92 <lcd_INIT+0x4a>
	else if(lines == 2)
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d101      	bne.n	8000c92 <lcd_INIT+0x4a>
		_LINES=LCD_2_LINES_COMMAND;
 8000c8e:	2328      	movs	r3, #40	; 0x28
 8000c90:	73bb      	strb	r3, [r7, #14]
	if(mode == 4)
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d102      	bne.n	8000c9e <lcd_INIT+0x56>
		_MODE=LCD_4BIT_MODE;
 8000c98:	2320      	movs	r3, #32
 8000c9a:	737b      	strb	r3, [r7, #13]
 8000c9c:	e004      	b.n	8000ca8 <lcd_INIT+0x60>
	else if(mode == 8)
 8000c9e:	797b      	ldrb	r3, [r7, #5]
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d101      	bne.n	8000ca8 <lcd_INIT+0x60>
		_MODE=LCD_8BIT_MODE;
 8000ca4:	2330      	movs	r3, #48	; 0x30
 8000ca6:	737b      	strb	r3, [r7, #13]
	if(mode==4)lcd_start4Bit();
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d101      	bne.n	8000cb2 <lcd_INIT+0x6a>
 8000cae:	f7ff ffa9 	bl	8000c04 <lcd_start4Bit>
	LCD_PORT_HIGH((_DOTS)|(_LINES)|(_MODE));
 8000cb2:	21ff      	movs	r1, #255	; 0xff
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <lcd_INIT+0xa4>)
 8000cb6:	f7ff ff5c 	bl	8000b72 <GPIO_Reset_pins>
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <lcd_INIT+0xa4>)
 8000ccc:	f7ff ff41 	bl	8000b52 <GPIO_Set_pins>
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <lcd_INIT+0xa8>)
 8000cd4:	f7ff ff16 	bl	8000b04 <GPIO_Reset_Pin>
 8000cd8:	210e      	movs	r1, #14
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <lcd_INIT+0xa8>)
 8000cdc:	f7ff ff12 	bl	8000b04 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 8000ce0:	f7ff ff74 	bl	8000bcc <lcd_ENABLE_R_W_DATA>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40011000 	.word	0x40011000

08000cf4 <lcd_Send_Command>:

void lcd_Send_Command(unsigned command)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	LCD_PORT_HIGH(command);
 8000cfc:	21ff      	movs	r1, #255	; 0xff
 8000cfe:	480a      	ldr	r0, [pc, #40]	; (8000d28 <lcd_Send_Command+0x34>)
 8000d00:	f7ff ff37 	bl	8000b72 <GPIO_Reset_pins>
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <lcd_Send_Command+0x34>)
 8000d08:	f7ff ff23 	bl	8000b52 <GPIO_Set_pins>
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <lcd_Send_Command+0x38>)
 8000d10:	f7ff fef8 	bl	8000b04 <GPIO_Reset_Pin>
 8000d14:	210e      	movs	r1, #14
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <lcd_Send_Command+0x38>)
 8000d18:	f7ff fef4 	bl	8000b04 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 8000d1c:	f7ff ff56 	bl	8000bcc <lcd_ENABLE_R_W_DATA>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	40011000 	.word	0x40011000

08000d30 <lcd_SET_CURSOR_POSITION>:

void lcd_SET_CURSOR_POSITION(char line ,char pos)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
	if(line == 1)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d116      	bne.n	8000d74 <lcd_SET_CURSOR_POSITION+0x44>
	{
		LCD_PORT_HIGH((LCD_CURSOR_POS_1ST_LINE_COMMAND) | (pos));
 8000d46:	21ff      	movs	r1, #255	; 0xff
 8000d48:	4819      	ldr	r0, [pc, #100]	; (8000db0 <lcd_SET_CURSOR_POSITION+0x80>)
 8000d4a:	f7ff ff12 	bl	8000b72 <GPIO_Reset_pins>
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	4815      	ldr	r0, [pc, #84]	; (8000db0 <lcd_SET_CURSOR_POSITION+0x80>)
 8000d5a:	f7ff fefa 	bl	8000b52 <GPIO_Set_pins>
 8000d5e:	210f      	movs	r1, #15
 8000d60:	4814      	ldr	r0, [pc, #80]	; (8000db4 <lcd_SET_CURSOR_POSITION+0x84>)
 8000d62:	f7ff fecf 	bl	8000b04 <GPIO_Reset_Pin>
 8000d66:	210e      	movs	r1, #14
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <lcd_SET_CURSOR_POSITION+0x84>)
 8000d6a:	f7ff fecb 	bl	8000b04 <GPIO_Reset_Pin>
		lcd_ENABLE_R_W_DATA();
 8000d6e:	f7ff ff2d 	bl	8000bcc <lcd_ENABLE_R_W_DATA>
	else if (line ==2)
	{
		LCD_PORT_HIGH((LCD_CURSOR_POS_2ND_LINE_COMMAND) | (pos));
		lcd_ENABLE_R_W_DATA();}
	else {}
}
 8000d72:	e018      	b.n	8000da6 <lcd_SET_CURSOR_POSITION+0x76>
	else if (line ==2)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d115      	bne.n	8000da6 <lcd_SET_CURSOR_POSITION+0x76>
		LCD_PORT_HIGH((LCD_CURSOR_POS_2ND_LINE_COMMAND) | (pos));
 8000d7a:	21ff      	movs	r1, #255	; 0xff
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <lcd_SET_CURSOR_POSITION+0x80>)
 8000d7e:	f7ff fef8 	bl	8000b72 <GPIO_Reset_pins>
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <lcd_SET_CURSOR_POSITION+0x80>)
 8000d8e:	f7ff fee0 	bl	8000b52 <GPIO_Set_pins>
 8000d92:	210f      	movs	r1, #15
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <lcd_SET_CURSOR_POSITION+0x84>)
 8000d96:	f7ff feb5 	bl	8000b04 <GPIO_Reset_Pin>
 8000d9a:	210e      	movs	r1, #14
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <lcd_SET_CURSOR_POSITION+0x84>)
 8000d9e:	f7ff feb1 	bl	8000b04 <GPIO_Reset_Pin>
		lcd_ENABLE_R_W_DATA();}
 8000da2:	f7ff ff13 	bl	8000bcc <lcd_ENABLE_R_W_DATA>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	40011000 	.word	0x40011000

08000db8 <lcd_WRITE_TEXT>:
	LCD_PORT_HIGH2(ch);
	lcd_ENABLE_R_W_DATA();
}

void lcd_WRITE_TEXT(char *ch)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	int i =0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
	for(;ch[i]!='\0';i++)
 8000dc4:	e018      	b.n	8000df8 <lcd_WRITE_TEXT+0x40>
	{
	LCD_PORT_HIGH2(ch[i]);
 8000dc6:	21ff      	movs	r1, #255	; 0xff
 8000dc8:	4810      	ldr	r0, [pc, #64]	; (8000e0c <lcd_WRITE_TEXT+0x54>)
 8000dca:	f7ff fed2 	bl	8000b72 <GPIO_Reset_pins>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <lcd_WRITE_TEXT+0x54>)
 8000dda:	f7ff feba 	bl	8000b52 <GPIO_Set_pins>
 8000dde:	210f      	movs	r1, #15
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <lcd_WRITE_TEXT+0x58>)
 8000de2:	f7ff fe7c 	bl	8000ade <GPIO_Set_Pin>
 8000de6:	210e      	movs	r1, #14
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <lcd_WRITE_TEXT+0x58>)
 8000dea:	f7ff fe8b 	bl	8000b04 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 8000dee:	f7ff feed 	bl	8000bcc <lcd_ENABLE_R_W_DATA>
	for(;ch[i]!='\0';i++)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e0      	bne.n	8000dc6 <lcd_WRITE_TEXT+0xe>
	}
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000

08000e14 <delay_ms>:
#include "GPIOSTM32.h"
#include "EXTI.h"


void delay_ms(int x)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=0;i<x;i++){
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e00d      	b.n	8000e3e <delay_ms+0x2a>
	for(j=0;j<530;j++){}
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	e002      	b.n	8000e2e <delay_ms+0x1a>
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f240 2211 	movw	r2, #529	; 0x211
 8000e34:	4293      	cmp	r3, r2
 8000e36:	ddf7      	ble.n	8000e28 <delay_ms+0x14>
	for(i=0;i<x;i++){
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dbed      	blt.n	8000e22 <delay_ms+0xe>
	}
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <IRQ14>:


void IRQ14(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	for(int i = 0;i<=6;i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	e009      	b.n	8000e70 <IRQ14+0x20>
	{
	GPIO_Toggle_Pin(GPIOB,GPIO_PIN14);
 8000e5c:	210e      	movs	r1, #14
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <IRQ14+0x38>)
 8000e60:	f7ff fe64 	bl	8000b2c <GPIO_Toggle_Pin>
	delay_ms(100);
 8000e64:	2064      	movs	r0, #100	; 0x64
 8000e66:	f7ff ffd5 	bl	8000e14 <delay_ms>
	for(int i = 0;i<=6;i++)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	ddf2      	ble.n	8000e5c <IRQ14+0xc>
	}
	GPIO_Reset_Pin_Atomic(GPIOB,GPIO_PIN14);
 8000e76:	210e      	movs	r1, #14
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <IRQ14+0x38>)
 8000e7a:	f7ff fe21 	bl	8000ac0 <GPIO_Reset_Pin_Atomic>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <IRQx>:
void IRQx(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <IRQ15>:

void IRQ15(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	for(int i = 0;i<=6;i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	e009      	b.n	8000eb8 <IRQ15+0x20>
	{
	GPIO_Toggle_Pin(GPIOB,GPIO_PIN15);
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <IRQ15+0x38>)
 8000ea8:	f7ff fe40 	bl	8000b2c <GPIO_Toggle_Pin>
	delay_ms(100);
 8000eac:	2064      	movs	r0, #100	; 0x64
 8000eae:	f7ff ffb1 	bl	8000e14 <delay_ms>
	for(int i = 0;i<=6;i++)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	ddf2      	ble.n	8000ea4 <IRQ15+0xc>
	}
	GPIO_Reset_Pin_Atomic(GPIOB,GPIO_PIN15);
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <IRQ15+0x38>)
 8000ec2:	f7ff fdfd 	bl	8000ac0 <GPIO_Reset_Pin_Atomic>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <clock_init>:
void clock_init(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=(IOPAEN | IOPBEN | AFIOEN |IOPCEN |IOPDEN);
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <clock_init+0x18>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <clock_init+0x18>)
 8000ede:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
 8000ee2:	6193      	str	r3, [r2, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <port_init>:

void port_init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

    GPIO_Init_All_Output(GPIOB,OUTPUT_PUSH_PULL_2MHZ_ALL);
 8000ef4:	f04f 3122 	mov.w	r1, #572662306	; 0x22222222
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <port_init+0x30>)
 8000efa:	f7ff fe4b 	bl	8000b94 <GPIO_Init_All_Output>
    GPIO_Init_Output_Pin(GPIOC,GPIO_PIN13,OUTPUT_PUSH_PULL_2MHZ);
 8000efe:	2202      	movs	r2, #2
 8000f00:	210d      	movs	r1, #13
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <port_init+0x34>)
 8000f04:	f7ff fd97 	bl	8000a36 <GPIO_Init_Output_Pin>
    GPIO_Init_Output_Pin(GPIOC,GPIO_PIN14,OUTPUT_PUSH_PULL_2MHZ);
 8000f08:	2202      	movs	r2, #2
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <port_init+0x34>)
 8000f0e:	f7ff fd92 	bl	8000a36 <GPIO_Init_Output_Pin>
	GPIO_Init_Output_Pin(GPIOC,GPIO_PIN15,OUTPUT_PUSH_PULL_2MHZ);
 8000f12:	2202      	movs	r2, #2
 8000f14:	210f      	movs	r1, #15
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <port_init+0x34>)
 8000f18:	f7ff fd8d 	bl	8000a36 <GPIO_Init_Output_Pin>



}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40010c00 	.word	0x40010c00
 8000f24:	40011000 	.word	0x40011000

08000f28 <main>:
char text[]={"STM32F103C6 SOC"};
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

	clock_init();
 8000f2c:	f7ff ffd2 	bl	8000ed4 <clock_init>
	delay_ms(100);
 8000f30:	2064      	movs	r0, #100	; 0x64
 8000f32:	f7ff ff6f 	bl	8000e14 <delay_ms>
  	port_init();
 8000f36:	f7ff ffdb 	bl	8000ef0 <port_init>


	lcd_INIT(_40DOTS,_2LINE,_8BIT);
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	2008      	movs	r0, #8
 8000f40:	f7ff fe82 	bl	8000c48 <lcd_INIT>
    lcd_Send_Command(LCD_CURS_OFF_COMMAND | LCD_BLINK_OFF_COMMAND | LCD_DATA_ON_COMMAND);
 8000f44:	200c      	movs	r0, #12
 8000f46:	f7ff fed5 	bl	8000cf4 <lcd_Send_Command>
	lcd_WRITE_TEXT(text);
 8000f4a:	48ad      	ldr	r0, [pc, #692]	; (8001200 <main+0x2d8>)
 8000f4c:	f7ff ff34 	bl	8000db8 <lcd_WRITE_TEXT>


	lcd_Send_Command(LCD_CURSOR_POS_2ND_LINE_COMMAND);
 8000f50:	20c0      	movs	r0, #192	; 0xc0
 8000f52:	f7ff fecf 	bl	8000cf4 <lcd_Send_Command>
	lcd_WRITE_TEXT("External Line");
 8000f56:	48ab      	ldr	r0, [pc, #684]	; (8001204 <main+0x2dc>)
 8000f58:	f7ff ff2e 	bl	8000db8 <lcd_WRITE_TEXT>


	External_Interrupt_Reset();
 8000f5c:	f7ff fb46 	bl	80005ec <External_Interrupt_Reset>

	Software_Interrupt_Trigger(GPIO_PIN3,IRQ15);
 8000f60:	49a9      	ldr	r1, [pc, #676]	; (8001208 <main+0x2e0>)
 8000f62:	2003      	movs	r0, #3
 8000f64:	f7ff fb70 	bl	8000648 <Software_Interrupt_Trigger>

  	External_Interrupt_Init(GPIOA,GPIO_PIN0,FALLING_EDGE,IRQ14);
 8000f68:	4ba8      	ldr	r3, [pc, #672]	; (800120c <main+0x2e4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	48a8      	ldr	r0, [pc, #672]	; (8001210 <main+0x2e8>)
 8000f70:	f7ff fa2a 	bl	80003c8 <External_Interrupt_Init>
    External_Interrupt_Init(GPIOA,GPIO_PIN1,FALLING_EDGE,IRQx);
 8000f74:	4ba7      	ldr	r3, [pc, #668]	; (8001214 <main+0x2ec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	48a5      	ldr	r0, [pc, #660]	; (8001210 <main+0x2e8>)
 8000f7c:	f7ff fa24 	bl	80003c8 <External_Interrupt_Init>
    External_Interrupt_Init(GPIOA,GPIO_PIN2,RISING_EDGE,IRQx);
 8000f80:	4ba4      	ldr	r3, [pc, #656]	; (8001214 <main+0x2ec>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	2102      	movs	r1, #2
 8000f86:	48a2      	ldr	r0, [pc, #648]	; (8001210 <main+0x2e8>)
 8000f88:	f7ff fa1e 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOA,GPIO_PIN3,FALLING_EDGE,IRQx);
 8000f8c:	4ba1      	ldr	r3, [pc, #644]	; (8001214 <main+0x2ec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2103      	movs	r1, #3
 8000f92:	489f      	ldr	r0, [pc, #636]	; (8001210 <main+0x2e8>)
 8000f94:	f7ff fa18 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOA,GPIO_PIN4,RISING_EDGE,IRQx);
 8000f98:	4b9e      	ldr	r3, [pc, #632]	; (8001214 <main+0x2ec>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	489c      	ldr	r0, [pc, #624]	; (8001210 <main+0x2e8>)
 8000fa0:	f7ff fa12 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOA,GPIO_PIN5,RISING_EDGE,IRQx);
 8000fa4:	4b9b      	ldr	r3, [pc, #620]	; (8001214 <main+0x2ec>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2105      	movs	r1, #5
 8000faa:	4899      	ldr	r0, [pc, #612]	; (8001210 <main+0x2e8>)
 8000fac:	f7ff fa0c 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOA,GPIO_PIN6,FALLING_EDGE,IRQx);
 8000fb0:	4b98      	ldr	r3, [pc, #608]	; (8001214 <main+0x2ec>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2106      	movs	r1, #6
 8000fb6:	4896      	ldr	r0, [pc, #600]	; (8001210 <main+0x2e8>)
 8000fb8:	f7ff fa06 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOA,GPIO_PIN7,FALLING_EDGE,IRQx);
 8000fbc:	4b95      	ldr	r3, [pc, #596]	; (8001214 <main+0x2ec>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2107      	movs	r1, #7
 8000fc2:	4893      	ldr	r0, [pc, #588]	; (8001210 <main+0x2e8>)
 8000fc4:	f7ff fa00 	bl	80003c8 <External_Interrupt_Init>


  	External_Interrupt_Init(GPIOB,GPIO_PIN8,RISING_EDGE,IRQx);
 8000fc8:	4b92      	ldr	r3, [pc, #584]	; (8001214 <main+0x2ec>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4892      	ldr	r0, [pc, #584]	; (8001218 <main+0x2f0>)
 8000fd0:	f7ff f9fa 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOB,GPIO_PIN9,RISING_EDGE,IRQx);
 8000fd4:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <main+0x2ec>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2109      	movs	r1, #9
 8000fda:	488f      	ldr	r0, [pc, #572]	; (8001218 <main+0x2f0>)
 8000fdc:	f7ff f9f4 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOB,GPIO_PIN10,FALLING_EDGE,IRQx);
 8000fe0:	4b8c      	ldr	r3, [pc, #560]	; (8001214 <main+0x2ec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	488c      	ldr	r0, [pc, #560]	; (8001218 <main+0x2f0>)
 8000fe8:	f7ff f9ee 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOB,GPIO_PIN11,FALLING_EDGE,IRQx);
 8000fec:	4b89      	ldr	r3, [pc, #548]	; (8001214 <main+0x2ec>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	210b      	movs	r1, #11
 8000ff2:	4889      	ldr	r0, [pc, #548]	; (8001218 <main+0x2f0>)
 8000ff4:	f7ff f9e8 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOB,GPIO_PIN13,RISING_EDGE);
  	External_Interrupt_Init(GPIOB,GPIO_PIN14,FALLING_EDGE);
  	External_Interrupt_Init(GPIOB,GPIO_PIN15,FALLING_EDGE);*/


  	External_Interrupt_Init(GPIOD,GPIO_PIN0,FALLING_EDGE,IRQ14);
 8000ff8:	4b84      	ldr	r3, [pc, #528]	; (800120c <main+0x2e4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4887      	ldr	r0, [pc, #540]	; (800121c <main+0x2f4>)
 8001000:	f7ff f9e2 	bl	80003c8 <External_Interrupt_Init>
  	External_Interrupt_Init(GPIOD,GPIO_PIN1,BOTH_EDGES,IRQx);
 8001004:	4b83      	ldr	r3, [pc, #524]	; (8001214 <main+0x2ec>)
 8001006:	2202      	movs	r2, #2
 8001008:	2101      	movs	r1, #1
 800100a:	4884      	ldr	r0, [pc, #528]	; (800121c <main+0x2f4>)
 800100c:	f7ff f9dc 	bl	80003c8 <External_Interrupt_Init>
	for(;;)
	{



	switch(External_Interrupt_Line)
 8001010:	4b83      	ldr	r3, [pc, #524]	; (8001220 <main+0x2f8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	f200 80e3 	bhi.w	80011e0 <main+0x2b8>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <main+0xf8>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	08001061 	.word	0x08001061
 8001024:	08001079 	.word	0x08001079
 8001028:	08001091 	.word	0x08001091
 800102c:	080010a9 	.word	0x080010a9
 8001030:	080010c1 	.word	0x080010c1
 8001034:	080010d9 	.word	0x080010d9
 8001038:	080010f1 	.word	0x080010f1
 800103c:	08001109 	.word	0x08001109
 8001040:	08001121 	.word	0x08001121
 8001044:	08001139 	.word	0x08001139
 8001048:	08001151 	.word	0x08001151
 800104c:	08001169 	.word	0x08001169
 8001050:	08001181 	.word	0x08001181
 8001054:	08001199 	.word	0x08001199
 8001058:	080011b1 	.word	0x080011b1
 800105c:	080011c9 	.word	0x080011c9
	{
	case 0:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("0 ");break;
 8001060:	210e      	movs	r1, #14
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff fe64 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001068:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <main+0x2f8>)
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	486c      	ldr	r0, [pc, #432]	; (8001224 <main+0x2fc>)
 8001072:	f7ff fea1 	bl	8000db8 <lcd_WRITE_TEXT>
 8001076:	e0bf      	b.n	80011f8 <main+0x2d0>
	case 1:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("1 ");break;
 8001078:	210e      	movs	r1, #14
 800107a:	2002      	movs	r0, #2
 800107c:	f7ff fe58 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <main+0x2f8>)
 8001082:	f04f 32ff 	mov.w	r2, #4294967295
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4867      	ldr	r0, [pc, #412]	; (8001228 <main+0x300>)
 800108a:	f7ff fe95 	bl	8000db8 <lcd_WRITE_TEXT>
 800108e:	e0b3      	b.n	80011f8 <main+0x2d0>
	case 2:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("2 ");break;
 8001090:	210e      	movs	r1, #14
 8001092:	2002      	movs	r0, #2
 8001094:	f7ff fe4c 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001098:	4b61      	ldr	r3, [pc, #388]	; (8001220 <main+0x2f8>)
 800109a:	f04f 32ff 	mov.w	r2, #4294967295
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	4862      	ldr	r0, [pc, #392]	; (800122c <main+0x304>)
 80010a2:	f7ff fe89 	bl	8000db8 <lcd_WRITE_TEXT>
 80010a6:	e0a7      	b.n	80011f8 <main+0x2d0>
	case 3:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("3 ");break;
 80010a8:	210e      	movs	r1, #14
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff fe40 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80010b0:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <main+0x2f8>)
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	485d      	ldr	r0, [pc, #372]	; (8001230 <main+0x308>)
 80010ba:	f7ff fe7d 	bl	8000db8 <lcd_WRITE_TEXT>
 80010be:	e09b      	b.n	80011f8 <main+0x2d0>
	case 4:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("4 ");break;
 80010c0:	210e      	movs	r1, #14
 80010c2:	2002      	movs	r0, #2
 80010c4:	f7ff fe34 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80010c8:	4b55      	ldr	r3, [pc, #340]	; (8001220 <main+0x2f8>)
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4858      	ldr	r0, [pc, #352]	; (8001234 <main+0x30c>)
 80010d2:	f7ff fe71 	bl	8000db8 <lcd_WRITE_TEXT>
 80010d6:	e08f      	b.n	80011f8 <main+0x2d0>
	case 5:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("5 ");break;
 80010d8:	210e      	movs	r1, #14
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fe28 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80010e0:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <main+0x2f8>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4853      	ldr	r0, [pc, #332]	; (8001238 <main+0x310>)
 80010ea:	f7ff fe65 	bl	8000db8 <lcd_WRITE_TEXT>
 80010ee:	e083      	b.n	80011f8 <main+0x2d0>
	case 6:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("6 ");break;
 80010f0:	210e      	movs	r1, #14
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff fe1c 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <main+0x2f8>)
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	484e      	ldr	r0, [pc, #312]	; (800123c <main+0x314>)
 8001102:	f7ff fe59 	bl	8000db8 <lcd_WRITE_TEXT>
 8001106:	e077      	b.n	80011f8 <main+0x2d0>
	case 7:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("7 ");break;
 8001108:	210e      	movs	r1, #14
 800110a:	2002      	movs	r0, #2
 800110c:	f7ff fe10 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <main+0x2f8>)
 8001112:	f04f 32ff 	mov.w	r2, #4294967295
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4849      	ldr	r0, [pc, #292]	; (8001240 <main+0x318>)
 800111a:	f7ff fe4d 	bl	8000db8 <lcd_WRITE_TEXT>
 800111e:	e06b      	b.n	80011f8 <main+0x2d0>
	case 8:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("8 ");break;
 8001120:	210e      	movs	r1, #14
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff fe04 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001128:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <main+0x2f8>)
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	4844      	ldr	r0, [pc, #272]	; (8001244 <main+0x31c>)
 8001132:	f7ff fe41 	bl	8000db8 <lcd_WRITE_TEXT>
 8001136:	e05f      	b.n	80011f8 <main+0x2d0>
	case 9:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("9 ");break;
 8001138:	210e      	movs	r1, #14
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff fdf8 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <main+0x2f8>)
 8001142:	f04f 32ff 	mov.w	r2, #4294967295
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	483f      	ldr	r0, [pc, #252]	; (8001248 <main+0x320>)
 800114a:	f7ff fe35 	bl	8000db8 <lcd_WRITE_TEXT>
 800114e:	e053      	b.n	80011f8 <main+0x2d0>
	case 10:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("10");break;
 8001150:	210e      	movs	r1, #14
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff fdec 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <main+0x2f8>)
 800115a:	f04f 32ff 	mov.w	r2, #4294967295
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <main+0x324>)
 8001162:	f7ff fe29 	bl	8000db8 <lcd_WRITE_TEXT>
 8001166:	e047      	b.n	80011f8 <main+0x2d0>
	case 11:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("11");break;
 8001168:	210e      	movs	r1, #14
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff fde0 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <main+0x2f8>)
 8001172:	f04f 32ff 	mov.w	r2, #4294967295
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	4835      	ldr	r0, [pc, #212]	; (8001250 <main+0x328>)
 800117a:	f7ff fe1d 	bl	8000db8 <lcd_WRITE_TEXT>
 800117e:	e03b      	b.n	80011f8 <main+0x2d0>
	case 12:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("12");break;
 8001180:	210e      	movs	r1, #14
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff fdd4 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <main+0x2f8>)
 800118a:	f04f 32ff 	mov.w	r2, #4294967295
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4830      	ldr	r0, [pc, #192]	; (8001254 <main+0x32c>)
 8001192:	f7ff fe11 	bl	8000db8 <lcd_WRITE_TEXT>
 8001196:	e02f      	b.n	80011f8 <main+0x2d0>
	case 13:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("13");break;
 8001198:	210e      	movs	r1, #14
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff fdc8 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <main+0x2f8>)
 80011a2:	f04f 32ff 	mov.w	r2, #4294967295
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	482b      	ldr	r0, [pc, #172]	; (8001258 <main+0x330>)
 80011aa:	f7ff fe05 	bl	8000db8 <lcd_WRITE_TEXT>
 80011ae:	e023      	b.n	80011f8 <main+0x2d0>
	case 14:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("14");break;
 80011b0:	210e      	movs	r1, #14
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff fdbc 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x2f8>)
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	4826      	ldr	r0, [pc, #152]	; (800125c <main+0x334>)
 80011c2:	f7ff fdf9 	bl	8000db8 <lcd_WRITE_TEXT>
 80011c6:	e017      	b.n	80011f8 <main+0x2d0>
	case 15:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("15");break;
 80011c8:	210e      	movs	r1, #14
 80011ca:	2002      	movs	r0, #2
 80011cc:	f7ff fdb0 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <main+0x2f8>)
 80011d2:	f04f 32ff 	mov.w	r2, #4294967295
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <main+0x338>)
 80011da:	f7ff fded 	bl	8000db8 <lcd_WRITE_TEXT>
 80011de:	e00b      	b.n	80011f8 <main+0x2d0>
	default:lcd_SET_CURSOR_POSITION(2,14);External_Interrupt_Line = -1 ; lcd_WRITE_TEXT("--");break;
 80011e0:	210e      	movs	r1, #14
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff fda4 	bl	8000d30 <lcd_SET_CURSOR_POSITION>
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <main+0x2f8>)
 80011ea:	f04f 32ff 	mov.w	r2, #4294967295
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	481c      	ldr	r0, [pc, #112]	; (8001264 <main+0x33c>)
 80011f2:	f7ff fde1 	bl	8000db8 <lcd_WRITE_TEXT>
 80011f6:	bf00      	nop
	}
	delay_ms(200);
 80011f8:	20c8      	movs	r0, #200	; 0xc8
 80011fa:	f7ff fe0b 	bl	8000e14 <delay_ms>
	switch(External_Interrupt_Line)
 80011fe:	e707      	b.n	8001010 <main+0xe8>
 8001200:	20000004 	.word	0x20000004
 8001204:	08001398 	.word	0x08001398
 8001208:	08000e99 	.word	0x08000e99
 800120c:	08000e51 	.word	0x08000e51
 8001210:	40010800 	.word	0x40010800
 8001214:	08000e8d 	.word	0x08000e8d
 8001218:	40010c00 	.word	0x40010c00
 800121c:	40011400 	.word	0x40011400
 8001220:	20000000 	.word	0x20000000
 8001224:	080013a8 	.word	0x080013a8
 8001228:	080013ac 	.word	0x080013ac
 800122c:	080013b0 	.word	0x080013b0
 8001230:	080013b4 	.word	0x080013b4
 8001234:	080013b8 	.word	0x080013b8
 8001238:	080013bc 	.word	0x080013bc
 800123c:	080013c0 	.word	0x080013c0
 8001240:	080013c4 	.word	0x080013c4
 8001244:	080013c8 	.word	0x080013c8
 8001248:	080013cc 	.word	0x080013cc
 800124c:	080013d0 	.word	0x080013d0
 8001250:	080013d4 	.word	0x080013d4
 8001254:	080013d8 	.word	0x080013d8
 8001258:	080013dc 	.word	0x080013dc
 800125c:	080013e0 	.word	0x080013e0
 8001260:	080013e4 	.word	0x080013e4
 8001264:	080013e8 	.word	0x080013e8

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <HardFault_Handler+0x4>

0800127a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <BusFault_Handler+0x4>

08001286 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f82e 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ee:	f7ff ffe5 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f000 f821 	bl	8001338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f6:	f7ff fe17 	bl	8000f28 <main>
  bx lr
 80012fa:	4770      	bx	lr
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001304:	080013f4 	.word	0x080013f4
  ldr r2, =_sbss
 8001308:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800130c:	20000074 	.word	0x20000074

08001310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_2_IRQHandler>
	...

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000014 	.word	0x20000014
 8001334:	20000070 	.word	0x20000070

08001338 <__libc_init_array>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	2500      	movs	r5, #0
 800133c:	4e0c      	ldr	r6, [pc, #48]	; (8001370 <__libc_init_array+0x38>)
 800133e:	4c0d      	ldr	r4, [pc, #52]	; (8001374 <__libc_init_array+0x3c>)
 8001340:	1ba4      	subs	r4, r4, r6
 8001342:	10a4      	asrs	r4, r4, #2
 8001344:	42a5      	cmp	r5, r4
 8001346:	d109      	bne.n	800135c <__libc_init_array+0x24>
 8001348:	f000 f81a 	bl	8001380 <_init>
 800134c:	2500      	movs	r5, #0
 800134e:	4e0a      	ldr	r6, [pc, #40]	; (8001378 <__libc_init_array+0x40>)
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <__libc_init_array+0x44>)
 8001352:	1ba4      	subs	r4, r4, r6
 8001354:	10a4      	asrs	r4, r4, #2
 8001356:	42a5      	cmp	r5, r4
 8001358:	d105      	bne.n	8001366 <__libc_init_array+0x2e>
 800135a:	bd70      	pop	{r4, r5, r6, pc}
 800135c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001360:	4798      	blx	r3
 8001362:	3501      	adds	r5, #1
 8001364:	e7ee      	b.n	8001344 <__libc_init_array+0xc>
 8001366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800136a:	4798      	blx	r3
 800136c:	3501      	adds	r5, #1
 800136e:	e7f2      	b.n	8001356 <__libc_init_array+0x1e>
 8001370:	080013ec 	.word	0x080013ec
 8001374:	080013ec 	.word	0x080013ec
 8001378:	080013ec 	.word	0x080013ec
 800137c:	080013f0 	.word	0x080013f0

08001380 <_init>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr

0800138c <_fini>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	bf00      	nop
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr
