
STM32_GPIOs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba4  08000ba4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ba4  08000ba4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba4  08000ba4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba4  08000ba4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba8  08000ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000014  08000bc0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000bc0  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d12  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b8c  00000000  00000000  00023d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001340  00000000  00000000  000248db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e8  00000000  00000000  00025c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000270  00000000  00000000  00025f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000242b  00000000  00000000  00026178  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002d5c  00000000  00000000  000285a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007cb9c  00000000  00000000  0002b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a7e9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000990  00000000  00000000  000a7f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000b8c 	.word	0x08000b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000b8c 	.word	0x08000b8c

0800014c <GPIO_Init_Input_Pin>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Init_Input_Pin(volatile GPIO_t  *PORT,unsigned pin,unsigned input_mode,unsigned up_down)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	//PULL UP - PULL DOWN - FLOATING _ANALOG
		 	  if((pin>=0) && (pin<=7))  {PORT->CRL &= ~(0xf<<(4*pin));PORT->CRL |=(input_mode<<(4*pin));}
 800015a:	68bb      	ldr	r3, [r7, #8]
 800015c:	2b07      	cmp	r3, #7
 800015e:	d815      	bhi.n	800018c <GPIO_Init_Input_Pin+0x40>
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	68ba      	ldr	r2, [r7, #8]
 8000166:	0092      	lsls	r2, r2, #2
 8000168:	210f      	movs	r1, #15
 800016a:	fa01 f202 	lsl.w	r2, r1, r2
 800016e:	43d2      	mvns	r2, r2
 8000170:	401a      	ands	r2, r3
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	601a      	str	r2, [r3, #0]
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	68bb      	ldr	r3, [r7, #8]
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	6879      	ldr	r1, [r7, #4]
 8000180:	fa01 f303 	lsl.w	r3, r1, r3
 8000184:	431a      	orrs	r2, r3
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	e020      	b.n	80001ce <GPIO_Init_Input_Pin+0x82>
		 else if((pin>=8) && (pin<=15)) {PORT->CRH &= ~(0xf<<(4*(pin-8)));PORT->CRH |=(input_mode<<(4*(pin-8)));}
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	2b07      	cmp	r3, #7
 8000190:	d91d      	bls.n	80001ce <GPIO_Init_Input_Pin+0x82>
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	2b0f      	cmp	r3, #15
 8000196:	d81a      	bhi.n	80001ce <GPIO_Init_Input_Pin+0x82>
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	685a      	ldr	r2, [r3, #4]
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001a2:	3b08      	subs	r3, #8
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	210f      	movs	r1, #15
 80001a8:	fa01 f303 	lsl.w	r3, r1, r3
 80001ac:	43db      	mvns	r3, r3
 80001ae:	401a      	ands	r2, r3
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	685a      	ldr	r2, [r3, #4]
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001be:	3b08      	subs	r3, #8
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	fa01 f303 	lsl.w	r3, r1, r3
 80001c8:	431a      	orrs	r2, r3
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	605a      	str	r2, [r3, #4]
   //PULL UP - PULL DOWN
		 	 if(input_mode == INPUT_PULL_UP_DOWN)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b08      	cmp	r3, #8
 80001d2:	d119      	bne.n	8000208 <GPIO_Init_Input_Pin+0xbc>
		 	 	{
		if(up_down == DOWN)     PORT->ODR&= ~(BIT(pin));
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d10a      	bne.n	80001f0 <GPIO_Init_Input_Pin+0xa4>
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	68da      	ldr	r2, [r3, #12]
 80001de:	2101      	movs	r1, #1
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	fa01 f303 	lsl.w	r3, r1, r3
 80001e6:	43db      	mvns	r3, r3
 80001e8:	401a      	ands	r2, r3
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	60da      	str	r2, [r3, #12]
		else if(up_down == UP)  PORT->ODR|=(BIT(pin));
		 	 	}
}
 80001ee:	e00b      	b.n	8000208 <GPIO_Init_Input_Pin+0xbc>
		else if(up_down == UP)  PORT->ODR|=(BIT(pin));
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d108      	bne.n	8000208 <GPIO_Init_Input_Pin+0xbc>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	68da      	ldr	r2, [r3, #12]
 80001fa:	2101      	movs	r1, #1
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	431a      	orrs	r2, r3
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	60da      	str	r2, [r3, #12]
}
 8000208:	bf00      	nop
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <GPIO_Init_Output_Pin>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Init_Output_Pin(volatile GPIO_t  *PORT,unsigned pin,unsigned output_mode)
{
 8000212:	b480      	push	{r7}
 8000214:	b085      	sub	sp, #20
 8000216:	af00      	add	r7, sp, #0
 8000218:	60f8      	str	r0, [r7, #12]
 800021a:	60b9      	str	r1, [r7, #8]
 800021c:	607a      	str	r2, [r7, #4]

	  if((pin>=0) && (pin<=7)) {PORT->CRL &= ~(0xf<<(4*pin)); PORT->CRL |=(output_mode<<(4*pin));}
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d815      	bhi.n	8000250 <GPIO_Init_Output_Pin+0x3e>
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	68ba      	ldr	r2, [r7, #8]
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	210f      	movs	r1, #15
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	431a      	orrs	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	601a      	str	r2, [r3, #0]
 else if((pin>=8) && (pin<=15)){PORT->CRH &= ~(0xf<<(4*(pin-8))); PORT->CRH |=(output_mode<<(4*(pin-8)));}

}
 800024e:	e020      	b.n	8000292 <GPIO_Init_Output_Pin+0x80>
 else if((pin>=8) && (pin<=15)){PORT->CRH &= ~(0xf<<(4*(pin-8))); PORT->CRH |=(output_mode<<(4*(pin-8)));}
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d91d      	bls.n	8000292 <GPIO_Init_Output_Pin+0x80>
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	d81a      	bhi.n	8000292 <GPIO_Init_Output_Pin+0x80>
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	685a      	ldr	r2, [r3, #4]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000266:	3b08      	subs	r3, #8
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	210f      	movs	r1, #15
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000282:	3b08      	subs	r3, #8
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	fa01 f303 	lsl.w	r3, r1, r3
 800028c:	431a      	orrs	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	605a      	str	r2, [r3, #4]
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <GPIO_Set_Pin>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Set_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	PORT->ODR |= (1<<pin);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	2101      	movs	r1, #1
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	431a      	orrs	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	60da      	str	r2, [r3, #12]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr

080002c2 <GPIO_Reset_Pin>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Reset_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	6039      	str	r1, [r7, #0]
	PORT->ODR &= ~(1<<pin);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	2101      	movs	r1, #1
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	43d2      	mvns	r2, r2
 80002da:	401a      	ands	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	60da      	str	r2, [r3, #12]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr

080002ea <GPIO_Toggle_Pin>:
* 2. pin     	 >>>  according to MACROs GPIO_PINx(0~15)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Toggle_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
	PORT->ODR ^= (1<<pin);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	2101      	movs	r1, #1
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	405a      	eors	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	60da      	str	r2, [r3, #12]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <GPIO_Read_Pin>:
* it returns the state of that pin (1 or 0).
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
unsigned GPIO_Read_Pin(volatile GPIO_t  *PORT,unsigned pin)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
	return((PORT->IDR & (1<<pin)));
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	2101      	movs	r1, #1
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	fa01 f202 	lsl.w	r2, r1, r2
 8000326:	4013      	ands	r3, r2
}
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr

08000332 <GPIO_Set_pins>:
* 2. data     	 >>>  (0x0000~0xffff)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Set_pins(volatile GPIO_t  *PORT,unsigned GPIO_data)
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	6039      	str	r1, [r7, #0]
	PORT->ODR |=(GPIO_data);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	431a      	orrs	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	60da      	str	r2, [r3, #12]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr

08000352 <GPIO_Reset_pins>:
* 2. data     	 >>>  (0x0000~0xffff)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Reset_pins(volatile GPIO_t  *PORT,unsigned GPIO_data)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	6039      	str	r1, [r7, #0]
	PORT->ODR &= ~(GPIO_data);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68da      	ldr	r2, [r3, #12]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	43db      	mvns	r3, r3
 8000364:	401a      	ands	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	60da      	str	r2, [r3, #12]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <GPIO_Init_All_Output>:
* it returns nothing !
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
void GPIO_Init_All_Output(volatile GPIO_t  *PORT,unsigned output_mode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
	PORT->CRL &= ~(0xffff);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	0c1b      	lsrs	r3, r3, #16
 8000384:	041b      	lsls	r3, r3, #16
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	6013      	str	r3, [r2, #0]
	PORT->CRH &= ~(0xffff);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	0c1b      	lsrs	r3, r3, #16
 8000390:	041b      	lsls	r3, r3, #16
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	6053      	str	r3, [r2, #4]

	PORT->CRL = (output_mode);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	601a      	str	r2, [r3, #0]
	PORT->CRH = (output_mode);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	605a      	str	r2, [r3, #4]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <GPIO_Read_port>:
* it returns the value of the port. (pins voltages ones or zeros)
* NOTETHAT : GPIOA,GPIOB have 16 pins,but
* 			 GPIOC,GPIOD have 3,2 pins respectively
*/
unsigned GPIO_Read_port(volatile GPIO_t  *PORT)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	return(PORT->IDR);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	689b      	ldr	r3, [r3, #8]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <KeyPad_Send_Wave>:
#include "keyPad.h"

static unsigned pressed;

static void KeyPad_Send_Wave(unsigned n,volatile GPIO_t  *PORT)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	switch(n)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3b04      	subs	r3, #4
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	d82e      	bhi.n	8000434 <KeyPad_Send_Wave+0x70>
 80003d6:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <KeyPad_Send_Wave+0x18>)
 80003d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003dc:	080003ed 	.word	0x080003ed
 80003e0:	080003ff 	.word	0x080003ff
 80003e4:	08000411 	.word	0x08000411
 80003e8:	08000423 	.word	0x08000423
	{
		case 4:
			KEYPAD_PIN_HIGH(PORT,(4));
 80003ec:	2104      	movs	r1, #4
 80003ee:	6838      	ldr	r0, [r7, #0]
 80003f0:	f7ff ff54 	bl	800029c <GPIO_Set_Pin>
			KEYPAD_PIN_LOW(PORT,(7));
 80003f4:	2107      	movs	r1, #7
 80003f6:	6838      	ldr	r0, [r7, #0]
 80003f8:	f7ff ff63 	bl	80002c2 <GPIO_Reset_Pin>
			break;
 80003fc:	e01b      	b.n	8000436 <KeyPad_Send_Wave+0x72>
		case 5:
			KEYPAD_PIN_HIGH(PORT,(5));
 80003fe:	2105      	movs	r1, #5
 8000400:	6838      	ldr	r0, [r7, #0]
 8000402:	f7ff ff4b 	bl	800029c <GPIO_Set_Pin>
			KEYPAD_PIN_LOW(PORT,(4));
 8000406:	2104      	movs	r1, #4
 8000408:	6838      	ldr	r0, [r7, #0]
 800040a:	f7ff ff5a 	bl	80002c2 <GPIO_Reset_Pin>
			break;
 800040e:	e012      	b.n	8000436 <KeyPad_Send_Wave+0x72>
		case 6:
			KEYPAD_PIN_HIGH(PORT,(6));
 8000410:	2106      	movs	r1, #6
 8000412:	6838      	ldr	r0, [r7, #0]
 8000414:	f7ff ff42 	bl	800029c <GPIO_Set_Pin>
			KEYPAD_PIN_LOW(PORT,(5));
 8000418:	2105      	movs	r1, #5
 800041a:	6838      	ldr	r0, [r7, #0]
 800041c:	f7ff ff51 	bl	80002c2 <GPIO_Reset_Pin>
			break;
 8000420:	e009      	b.n	8000436 <KeyPad_Send_Wave+0x72>
		case 7:
			KEYPAD_PIN_HIGH(PORT,(7));
 8000422:	2107      	movs	r1, #7
 8000424:	6838      	ldr	r0, [r7, #0]
 8000426:	f7ff ff39 	bl	800029c <GPIO_Set_Pin>
			KEYPAD_PIN_LOW(PORT,(6));
 800042a:	2106      	movs	r1, #6
 800042c:	6838      	ldr	r0, [r7, #0]
 800042e:	f7ff ff48 	bl	80002c2 <GPIO_Reset_Pin>
			break;
 8000432:	e000      	b.n	8000436 <KeyPad_Send_Wave+0x72>
		default:
			break;
 8000434:	bf00      	nop
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop

08000440 <KeyPad_Waiting>:

static void KeyPad_Waiting(volatile GPIO_t  *PORT,unsigned data)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	while(KEYPAD_PORT_READ(PORT)==data);
 800044a:	bf00      	nop
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ffad 	bl	80003ac <GPIO_Read_port>
 8000452:	4602      	mov	r2, r0
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	4293      	cmp	r3, r2
 8000458:	d0f8      	beq.n	800044c <KeyPad_Waiting+0xc>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <KeyPad_Scanning>:
* 		|	  1   2  3  -      |
* 		|	 CLR  0  =  +	   |
* 		|______________________|
*/
char KeyPad_Scanning(volatile GPIO_t  *PORT)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	KEYPAD_PORT_LOW(PORT,0xf0);
 800046c:	21f0      	movs	r1, #240	; 0xf0
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff6f 	bl	8000352 <GPIO_Reset_pins>

	KeyPad_Send_Wave(4,PORT);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	2004      	movs	r0, #4
 8000478:	f7ff ffa4 	bl	80003c4 <KeyPad_Send_Wave>
	pressed = KEYPAD_PORT_READ(PORT);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff ff95 	bl	80003ac <GPIO_Read_port>
 8000482:	4602      	mov	r2, r0
 8000484:	4b72      	ldr	r3, [pc, #456]	; (8000650 <KeyPad_Scanning+0x1ec>)
 8000486:	601a      	str	r2, [r3, #0]

	if( KEYPAD_PORT_READ(PORT)==0x11){KeyPad_Waiting(PORT,0x11);return('7');}
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff ff8f 	bl	80003ac <GPIO_Read_port>
 800048e:	4603      	mov	r3, r0
 8000490:	2b11      	cmp	r3, #17
 8000492:	d105      	bne.n	80004a0 <KeyPad_Scanning+0x3c>
 8000494:	2111      	movs	r1, #17
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff ffd2 	bl	8000440 <KeyPad_Waiting>
 800049c:	2337      	movs	r3, #55	; 0x37
 800049e:	e0d2      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x12){KeyPad_Waiting(PORT,0x12);return('4');}
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ff83 	bl	80003ac <GPIO_Read_port>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b12      	cmp	r3, #18
 80004aa:	d105      	bne.n	80004b8 <KeyPad_Scanning+0x54>
 80004ac:	2112      	movs	r1, #18
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ffc6 	bl	8000440 <KeyPad_Waiting>
 80004b4:	2334      	movs	r3, #52	; 0x34
 80004b6:	e0c6      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x14){KeyPad_Waiting(PORT,0x14);return('1');}
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ff77 	bl	80003ac <GPIO_Read_port>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b14      	cmp	r3, #20
 80004c2:	d105      	bne.n	80004d0 <KeyPad_Scanning+0x6c>
 80004c4:	2114      	movs	r1, #20
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f7ff ffba 	bl	8000440 <KeyPad_Waiting>
 80004cc:	2331      	movs	r3, #49	; 0x31
 80004ce:	e0ba      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x18){KeyPad_Waiting(PORT,0x18);return('c');}
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff ff6b 	bl	80003ac <GPIO_Read_port>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b18      	cmp	r3, #24
 80004da:	d105      	bne.n	80004e8 <KeyPad_Scanning+0x84>
 80004dc:	2118      	movs	r1, #24
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ffae 	bl	8000440 <KeyPad_Waiting>
 80004e4:	2363      	movs	r3, #99	; 0x63
 80004e6:	e0ae      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else{}


	KeyPad_Send_Wave(5,PORT);
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	2005      	movs	r0, #5
 80004ec:	f7ff ff6a 	bl	80003c4 <KeyPad_Send_Wave>
	pressed = KEYPAD_PORT_READ(PORT);
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff ff5b 	bl	80003ac <GPIO_Read_port>
 80004f6:	4602      	mov	r2, r0
 80004f8:	4b55      	ldr	r3, [pc, #340]	; (8000650 <KeyPad_Scanning+0x1ec>)
 80004fa:	601a      	str	r2, [r3, #0]
	if( KEYPAD_PORT_READ(PORT)==0x21){KeyPad_Waiting(PORT,0x21);return('8');}
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff55 	bl	80003ac <GPIO_Read_port>
 8000502:	4603      	mov	r3, r0
 8000504:	2b21      	cmp	r3, #33	; 0x21
 8000506:	d105      	bne.n	8000514 <KeyPad_Scanning+0xb0>
 8000508:	2121      	movs	r1, #33	; 0x21
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ff98 	bl	8000440 <KeyPad_Waiting>
 8000510:	2338      	movs	r3, #56	; 0x38
 8000512:	e098      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x22){KeyPad_Waiting(PORT,0x22);return('5');}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ff49 	bl	80003ac <GPIO_Read_port>
 800051a:	4603      	mov	r3, r0
 800051c:	2b22      	cmp	r3, #34	; 0x22
 800051e:	d105      	bne.n	800052c <KeyPad_Scanning+0xc8>
 8000520:	2122      	movs	r1, #34	; 0x22
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ff8c 	bl	8000440 <KeyPad_Waiting>
 8000528:	2335      	movs	r3, #53	; 0x35
 800052a:	e08c      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x24){KeyPad_Waiting(PORT,0x24);return('2');}
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff3d 	bl	80003ac <GPIO_Read_port>
 8000532:	4603      	mov	r3, r0
 8000534:	2b24      	cmp	r3, #36	; 0x24
 8000536:	d105      	bne.n	8000544 <KeyPad_Scanning+0xe0>
 8000538:	2124      	movs	r1, #36	; 0x24
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff ff80 	bl	8000440 <KeyPad_Waiting>
 8000540:	2332      	movs	r3, #50	; 0x32
 8000542:	e080      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x28){KeyPad_Waiting(PORT,0x28);return('0');}
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff31 	bl	80003ac <GPIO_Read_port>
 800054a:	4603      	mov	r3, r0
 800054c:	2b28      	cmp	r3, #40	; 0x28
 800054e:	d105      	bne.n	800055c <KeyPad_Scanning+0xf8>
 8000550:	2128      	movs	r1, #40	; 0x28
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f7ff ff74 	bl	8000440 <KeyPad_Waiting>
 8000558:	2330      	movs	r3, #48	; 0x30
 800055a:	e074      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else{}


	KeyPad_Send_Wave(6,PORT);
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	2006      	movs	r0, #6
 8000560:	f7ff ff30 	bl	80003c4 <KeyPad_Send_Wave>
	pressed = KEYPAD_PORT_READ(PORT);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ff21 	bl	80003ac <GPIO_Read_port>
 800056a:	4602      	mov	r2, r0
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <KeyPad_Scanning+0x1ec>)
 800056e:	601a      	str	r2, [r3, #0]
	if( KEYPAD_PORT_READ(PORT)==0x41){KeyPad_Waiting(PORT,0x41);return('9');}
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ff1b 	bl	80003ac <GPIO_Read_port>
 8000576:	4603      	mov	r3, r0
 8000578:	2b41      	cmp	r3, #65	; 0x41
 800057a:	d105      	bne.n	8000588 <KeyPad_Scanning+0x124>
 800057c:	2141      	movs	r1, #65	; 0x41
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff ff5e 	bl	8000440 <KeyPad_Waiting>
 8000584:	2339      	movs	r3, #57	; 0x39
 8000586:	e05e      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x42){KeyPad_Waiting(PORT,0x42);return('6');}
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff ff0f 	bl	80003ac <GPIO_Read_port>
 800058e:	4603      	mov	r3, r0
 8000590:	2b42      	cmp	r3, #66	; 0x42
 8000592:	d105      	bne.n	80005a0 <KeyPad_Scanning+0x13c>
 8000594:	2142      	movs	r1, #66	; 0x42
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ff52 	bl	8000440 <KeyPad_Waiting>
 800059c:	2336      	movs	r3, #54	; 0x36
 800059e:	e052      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x44){KeyPad_Waiting(PORT,0x44);return('3');}
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ff03 	bl	80003ac <GPIO_Read_port>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b44      	cmp	r3, #68	; 0x44
 80005aa:	d105      	bne.n	80005b8 <KeyPad_Scanning+0x154>
 80005ac:	2144      	movs	r1, #68	; 0x44
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f7ff ff46 	bl	8000440 <KeyPad_Waiting>
 80005b4:	2333      	movs	r3, #51	; 0x33
 80005b6:	e046      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x48){KeyPad_Waiting(PORT,0x48);return('=');}
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fef7 	bl	80003ac <GPIO_Read_port>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b48      	cmp	r3, #72	; 0x48
 80005c2:	d105      	bne.n	80005d0 <KeyPad_Scanning+0x16c>
 80005c4:	2148      	movs	r1, #72	; 0x48
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff ff3a 	bl	8000440 <KeyPad_Waiting>
 80005cc:	233d      	movs	r3, #61	; 0x3d
 80005ce:	e03a      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else{}

	KeyPad_Send_Wave(7,PORT);
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	2007      	movs	r0, #7
 80005d4:	f7ff fef6 	bl	80003c4 <KeyPad_Send_Wave>
	pressed = KEYPAD_PORT_READ(PORT);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fee7 	bl	80003ac <GPIO_Read_port>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <KeyPad_Scanning+0x1ec>)
 80005e2:	601a      	str	r2, [r3, #0]
	if( KEYPAD_PORT_READ(PORT)==0x81){KeyPad_Waiting(PORT,0x81);return('/');}
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fee1 	bl	80003ac <GPIO_Read_port>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b81      	cmp	r3, #129	; 0x81
 80005ee:	d105      	bne.n	80005fc <KeyPad_Scanning+0x198>
 80005f0:	2181      	movs	r1, #129	; 0x81
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ff24 	bl	8000440 <KeyPad_Waiting>
 80005f8:	232f      	movs	r3, #47	; 0x2f
 80005fa:	e024      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x82){KeyPad_Waiting(PORT,0x82);return('X');}
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff fed5 	bl	80003ac <GPIO_Read_port>
 8000602:	4603      	mov	r3, r0
 8000604:	2b82      	cmp	r3, #130	; 0x82
 8000606:	d105      	bne.n	8000614 <KeyPad_Scanning+0x1b0>
 8000608:	2182      	movs	r1, #130	; 0x82
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff18 	bl	8000440 <KeyPad_Waiting>
 8000610:	2358      	movs	r3, #88	; 0x58
 8000612:	e018      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x84){KeyPad_Waiting(PORT,0x84);return('-');}
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff fec9 	bl	80003ac <GPIO_Read_port>
 800061a:	4603      	mov	r3, r0
 800061c:	2b84      	cmp	r3, #132	; 0x84
 800061e:	d105      	bne.n	800062c <KeyPad_Scanning+0x1c8>
 8000620:	2184      	movs	r1, #132	; 0x84
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff0c 	bl	8000440 <KeyPad_Waiting>
 8000628:	232d      	movs	r3, #45	; 0x2d
 800062a:	e00c      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else if( KEYPAD_PORT_READ(PORT)==0x88){KeyPad_Waiting(PORT,0x88);return('+');}
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff febd 	bl	80003ac <GPIO_Read_port>
 8000632:	4603      	mov	r3, r0
 8000634:	2b88      	cmp	r3, #136	; 0x88
 8000636:	d105      	bne.n	8000644 <KeyPad_Scanning+0x1e0>
 8000638:	2188      	movs	r1, #136	; 0x88
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ff00 	bl	8000440 <KeyPad_Waiting>
 8000640:	232b      	movs	r3, #43	; 0x2b
 8000642:	e000      	b.n	8000646 <KeyPad_Scanning+0x1e2>
	else{}
	return (0);
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000030 	.word	0x20000030

08000654 <lcd_ENABLE_R_W_DATA>:


#include "lcd16.h"

static void lcd_ENABLE_R_W_DATA(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	LCD_PIN_HIGH(EN_PIN);
 800065a:	210d      	movs	r1, #13
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <lcd_ENABLE_R_W_DATA+0x34>)
 800065e:	f7ff fe1d 	bl	800029c <GPIO_Set_Pin>
	LCD_PIN_LOW(EN_PIN);
 8000662:	210d      	movs	r1, #13
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <lcd_ENABLE_R_W_DATA+0x34>)
 8000666:	f7ff fe2c 	bl	80002c2 <GPIO_Reset_Pin>
	int i=0;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
	for(;i<=1000;i++);
 800066e:	e002      	b.n	8000676 <lcd_ENABLE_R_W_DATA+0x22>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3301      	adds	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800067c:	ddf8      	ble.n	8000670 <lcd_ENABLE_R_W_DATA+0x1c>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40011000 	.word	0x40011000

0800068c <lcd_start4Bit>:

static void lcd_start4Bit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	LCD_PORT_HIGH(0x02);
 8000690:	21ff      	movs	r1, #255	; 0xff
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <lcd_start4Bit+0x3c>)
 8000694:	f7ff fe5d 	bl	8000352 <GPIO_Reset_pins>
 8000698:	2102      	movs	r1, #2
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <lcd_start4Bit+0x3c>)
 800069c:	f7ff fe49 	bl	8000332 <GPIO_Set_pins>
 80006a0:	210f      	movs	r1, #15
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <lcd_start4Bit+0x40>)
 80006a4:	f7ff fe0d 	bl	80002c2 <GPIO_Reset_Pin>
 80006a8:	210e      	movs	r1, #14
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <lcd_start4Bit+0x40>)
 80006ac:	f7ff fe09 	bl	80002c2 <GPIO_Reset_Pin>
	LCD_PIN_LOW(RS_PIN); LCD_PIN_LOW(RW_PIN);
 80006b0:	210f      	movs	r1, #15
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <lcd_start4Bit+0x40>)
 80006b4:	f7ff fe05 	bl	80002c2 <GPIO_Reset_Pin>
 80006b8:	210e      	movs	r1, #14
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <lcd_start4Bit+0x40>)
 80006bc:	f7ff fe01 	bl	80002c2 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 80006c0:	f7ff ffc8 	bl	8000654 <lcd_ENABLE_R_W_DATA>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40011000 	.word	0x40011000

080006d0 <lcd_INIT>:

void lcd_INIT(char dots, char lines, char mode)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	460b      	mov	r3, r1
 80006dc:	71bb      	strb	r3, [r7, #6]
 80006de:	4613      	mov	r3, r2
 80006e0:	717b      	strb	r3, [r7, #5]
	char _DOTS=0,_LINES=0,_MODE=0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	2300      	movs	r3, #0
 80006e8:	73bb      	strb	r3, [r7, #14]
 80006ea:	2300      	movs	r3, #0
 80006ec:	737b      	strb	r3, [r7, #13]
	if(dots==8)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d102      	bne.n	80006fa <lcd_INIT+0x2a>
		_DOTS= LCD_5X8_DOTS_COMMAND;
 80006f4:	2320      	movs	r3, #32
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e004      	b.n	8000704 <lcd_INIT+0x34>
	else if(dots==10)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	d101      	bne.n	8000704 <lcd_INIT+0x34>
		_DOTS= LCD_5X10_DOTS_COMMAND;
 8000700:	2324      	movs	r3, #36	; 0x24
 8000702:	73fb      	strb	r3, [r7, #15]
	if(lines == 1)
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d102      	bne.n	8000710 <lcd_INIT+0x40>
		_LINES=LCD_1_LINE_COMMAND;
 800070a:	2320      	movs	r3, #32
 800070c:	73bb      	strb	r3, [r7, #14]
 800070e:	e004      	b.n	800071a <lcd_INIT+0x4a>
	else if(lines == 2)
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d101      	bne.n	800071a <lcd_INIT+0x4a>
		_LINES=LCD_2_LINES_COMMAND;
 8000716:	2328      	movs	r3, #40	; 0x28
 8000718:	73bb      	strb	r3, [r7, #14]
	if(mode == 4)
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d102      	bne.n	8000726 <lcd_INIT+0x56>
		_MODE=LCD_4BIT_MODE;
 8000720:	2320      	movs	r3, #32
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	e004      	b.n	8000730 <lcd_INIT+0x60>
	else if(mode == 8)
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	2b08      	cmp	r3, #8
 800072a:	d101      	bne.n	8000730 <lcd_INIT+0x60>
		_MODE=LCD_8BIT_MODE;
 800072c:	2330      	movs	r3, #48	; 0x30
 800072e:	737b      	strb	r3, [r7, #13]
	if(mode==4)lcd_start4Bit();
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	2b04      	cmp	r3, #4
 8000734:	d101      	bne.n	800073a <lcd_INIT+0x6a>
 8000736:	f7ff ffa9 	bl	800068c <lcd_start4Bit>
	LCD_PORT_HIGH((_DOTS)|(_LINES)|(_MODE));
 800073a:	21ff      	movs	r1, #255	; 0xff
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <lcd_INIT+0xa4>)
 800073e:	f7ff fe08 	bl	8000352 <GPIO_Reset_pins>
 8000742:	7bfa      	ldrb	r2, [r7, #15]
 8000744:	7bbb      	ldrb	r3, [r7, #14]
 8000746:	4313      	orrs	r3, r2
 8000748:	b2da      	uxtb	r2, r3
 800074a:	7b7b      	ldrb	r3, [r7, #13]
 800074c:	4313      	orrs	r3, r2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <lcd_INIT+0xa4>)
 8000754:	f7ff fded 	bl	8000332 <GPIO_Set_pins>
 8000758:	210f      	movs	r1, #15
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <lcd_INIT+0xa8>)
 800075c:	f7ff fdb1 	bl	80002c2 <GPIO_Reset_Pin>
 8000760:	210e      	movs	r1, #14
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <lcd_INIT+0xa8>)
 8000764:	f7ff fdad 	bl	80002c2 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 8000768:	f7ff ff74 	bl	8000654 <lcd_ENABLE_R_W_DATA>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40011000 	.word	0x40011000

0800077c <lcd_Send_Command>:

void lcd_Send_Command(unsigned command)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	LCD_PORT_HIGH(command);
 8000784:	21ff      	movs	r1, #255	; 0xff
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <lcd_Send_Command+0x34>)
 8000788:	f7ff fde3 	bl	8000352 <GPIO_Reset_pins>
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <lcd_Send_Command+0x34>)
 8000790:	f7ff fdcf 	bl	8000332 <GPIO_Set_pins>
 8000794:	210f      	movs	r1, #15
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <lcd_Send_Command+0x38>)
 8000798:	f7ff fd93 	bl	80002c2 <GPIO_Reset_Pin>
 800079c:	210e      	movs	r1, #14
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <lcd_Send_Command+0x38>)
 80007a0:	f7ff fd8f 	bl	80002c2 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 80007a4:	f7ff ff56 	bl	8000654 <lcd_ENABLE_R_W_DATA>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	40011000 	.word	0x40011000

080007b8 <lcd_SET_CURSOR_POSITION>:

void lcd_SET_CURSOR_POSITION(char line ,char pos)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	460a      	mov	r2, r1
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]
	if(line == 1)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d116      	bne.n	80007fc <lcd_SET_CURSOR_POSITION+0x44>
	{
		LCD_PORT_HIGH((LCD_CURSOR_POS_1ST_LINE_COMMAND) | (pos));
 80007ce:	21ff      	movs	r1, #255	; 0xff
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <lcd_SET_CURSOR_POSITION+0x80>)
 80007d2:	f7ff fdbe 	bl	8000352 <GPIO_Reset_pins>
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <lcd_SET_CURSOR_POSITION+0x80>)
 80007e2:	f7ff fda6 	bl	8000332 <GPIO_Set_pins>
 80007e6:	210f      	movs	r1, #15
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <lcd_SET_CURSOR_POSITION+0x84>)
 80007ea:	f7ff fd6a 	bl	80002c2 <GPIO_Reset_Pin>
 80007ee:	210e      	movs	r1, #14
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <lcd_SET_CURSOR_POSITION+0x84>)
 80007f2:	f7ff fd66 	bl	80002c2 <GPIO_Reset_Pin>
		lcd_ENABLE_R_W_DATA();
 80007f6:	f7ff ff2d 	bl	8000654 <lcd_ENABLE_R_W_DATA>
	else if (line ==2)
	{
		LCD_PORT_HIGH((LCD_CURSOR_POS_2ND_LINE_COMMAND) | (pos));
		lcd_ENABLE_R_W_DATA();}
	else {}
}
 80007fa:	e018      	b.n	800082e <lcd_SET_CURSOR_POSITION+0x76>
	else if (line ==2)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d115      	bne.n	800082e <lcd_SET_CURSOR_POSITION+0x76>
		LCD_PORT_HIGH((LCD_CURSOR_POS_2ND_LINE_COMMAND) | (pos));
 8000802:	21ff      	movs	r1, #255	; 0xff
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <lcd_SET_CURSOR_POSITION+0x80>)
 8000806:	f7ff fda4 	bl	8000352 <GPIO_Reset_pins>
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <lcd_SET_CURSOR_POSITION+0x80>)
 8000816:	f7ff fd8c 	bl	8000332 <GPIO_Set_pins>
 800081a:	210f      	movs	r1, #15
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <lcd_SET_CURSOR_POSITION+0x84>)
 800081e:	f7ff fd50 	bl	80002c2 <GPIO_Reset_Pin>
 8000822:	210e      	movs	r1, #14
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <lcd_SET_CURSOR_POSITION+0x84>)
 8000826:	f7ff fd4c 	bl	80002c2 <GPIO_Reset_Pin>
		lcd_ENABLE_R_W_DATA();}
 800082a:	f7ff ff13 	bl	8000654 <lcd_ENABLE_R_W_DATA>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010c00 	.word	0x40010c00
 800083c:	40011000 	.word	0x40011000

08000840 <lcd_WRITE_CHAR>:

void lcd_WRITE_CHAR(char ch)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	LCD_PORT_HIGH2(ch);
 800084a:	21ff      	movs	r1, #255	; 0xff
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <lcd_WRITE_CHAR+0x38>)
 800084e:	f7ff fd80 	bl	8000352 <GPIO_Reset_pins>
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4619      	mov	r1, r3
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <lcd_WRITE_CHAR+0x38>)
 8000858:	f7ff fd6b 	bl	8000332 <GPIO_Set_pins>
 800085c:	210f      	movs	r1, #15
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <lcd_WRITE_CHAR+0x3c>)
 8000860:	f7ff fd1c 	bl	800029c <GPIO_Set_Pin>
 8000864:	210e      	movs	r1, #14
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <lcd_WRITE_CHAR+0x3c>)
 8000868:	f7ff fd2b 	bl	80002c2 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 800086c:	f7ff fef2 	bl	8000654 <lcd_ENABLE_R_W_DATA>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40010c00 	.word	0x40010c00
 800087c:	40011000 	.word	0x40011000

08000880 <lcd_WRITE_TEXT>:

void lcd_WRITE_TEXT(char *ch)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	int i =0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	for(;ch[i]!='\0';i++)
 800088c:	e018      	b.n	80008c0 <lcd_WRITE_TEXT+0x40>
	{
	LCD_PORT_HIGH2(ch[i]);
 800088e:	21ff      	movs	r1, #255	; 0xff
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <lcd_WRITE_TEXT+0x54>)
 8000892:	f7ff fd5e 	bl	8000352 <GPIO_Reset_pins>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <lcd_WRITE_TEXT+0x54>)
 80008a2:	f7ff fd46 	bl	8000332 <GPIO_Set_pins>
 80008a6:	210f      	movs	r1, #15
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <lcd_WRITE_TEXT+0x58>)
 80008aa:	f7ff fcf7 	bl	800029c <GPIO_Set_Pin>
 80008ae:	210e      	movs	r1, #14
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <lcd_WRITE_TEXT+0x58>)
 80008b2:	f7ff fd06 	bl	80002c2 <GPIO_Reset_Pin>
	lcd_ENABLE_R_W_DATA();
 80008b6:	f7ff fecd 	bl	8000654 <lcd_ENABLE_R_W_DATA>
	for(;ch[i]!='\0';i++)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1e0      	bne.n	800088e <lcd_WRITE_TEXT+0xe>
	}
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	40011000 	.word	0x40011000

080008dc <delay_ms>:
#include "keyPad.h"
#include "GPIOSTM32.h"


void delay_ms(int x)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=0;i<x;i++){
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e00d      	b.n	8000906 <delay_ms+0x2a>
	for(j=0;j<530;j++){}
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	e002      	b.n	80008f6 <delay_ms+0x1a>
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	f240 2211 	movw	r2, #529	; 0x211
 80008fc:	4293      	cmp	r3, r2
 80008fe:	ddf7      	ble.n	80008f0 <delay_ms+0x14>
	for(i=0;i<x;i++){
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	429a      	cmp	r2, r3
 800090c:	dbed      	blt.n	80008ea <delay_ms+0xe>
	}
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <clock_init>:

void clock_init(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=(IOPAEN | IOPBEN | AFIOEN |IOPCEN );
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <clock_init+0x18>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <clock_init+0x18>)
 8000922:	f043 031d 	orr.w	r3, r3, #29
 8000926:	6193      	str	r3, [r2, #24]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <port_init>:

void port_init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

    GPIO_Init_All_Output(GPIOB,OUTPUT_PUSH_PULL_2MHZ_ALL);
 8000938:	f04f 3122 	mov.w	r1, #572662306	; 0x22222222
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <port_init+0xa0>)
 800093e:	f7ff fd19 	bl	8000374 <GPIO_Init_All_Output>
    GPIO_Init_Output_Pin(GPIOC,GPIO_PIN13,OUTPUT_PUSH_PULL_2MHZ);
 8000942:	2202      	movs	r2, #2
 8000944:	210d      	movs	r1, #13
 8000946:	4824      	ldr	r0, [pc, #144]	; (80009d8 <port_init+0xa4>)
 8000948:	f7ff fc63 	bl	8000212 <GPIO_Init_Output_Pin>
    GPIO_Init_Output_Pin(GPIOC,GPIO_PIN14,OUTPUT_PUSH_PULL_2MHZ);
 800094c:	2202      	movs	r2, #2
 800094e:	210e      	movs	r1, #14
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <port_init+0xa4>)
 8000952:	f7ff fc5e 	bl	8000212 <GPIO_Init_Output_Pin>
	GPIO_Init_Output_Pin(GPIOC,GPIO_PIN15,OUTPUT_PUSH_PULL_2MHZ);
 8000956:	2202      	movs	r2, #2
 8000958:	210f      	movs	r1, #15
 800095a:	481f      	ldr	r0, [pc, #124]	; (80009d8 <port_init+0xa4>)
 800095c:	f7ff fc59 	bl	8000212 <GPIO_Init_Output_Pin>


	GPIO_Init_Input_Pin(GPIOA,GPIO_PIN14,INPUT_PULL_UP_DOWN,DOWN);
 8000960:	2300      	movs	r3, #0
 8000962:	2208      	movs	r2, #8
 8000964:	210e      	movs	r1, #14
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <port_init+0xa8>)
 8000968:	f7ff fbf0 	bl	800014c <GPIO_Init_Input_Pin>
	GPIO_Init_Input_Pin(GPIOA,GPIO_PIN15,INPUT_PULL_UP_DOWN,DOWN);
 800096c:	2300      	movs	r3, #0
 800096e:	2208      	movs	r2, #8
 8000970:	210f      	movs	r1, #15
 8000972:	481a      	ldr	r0, [pc, #104]	; (80009dc <port_init+0xa8>)
 8000974:	f7ff fbea 	bl	800014c <GPIO_Init_Input_Pin>

    GPIO_Init_Input_Pin(GPIOA,GPIO_PIN0,INPUT_PULL_UP_DOWN,DOWN);
 8000978:	2300      	movs	r3, #0
 800097a:	2208      	movs	r2, #8
 800097c:	2100      	movs	r1, #0
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <port_init+0xa8>)
 8000980:	f7ff fbe4 	bl	800014c <GPIO_Init_Input_Pin>
    GPIO_Init_Input_Pin(GPIOA,GPIO_PIN1,INPUT_PULL_UP_DOWN,DOWN);
 8000984:	2300      	movs	r3, #0
 8000986:	2208      	movs	r2, #8
 8000988:	2101      	movs	r1, #1
 800098a:	4814      	ldr	r0, [pc, #80]	; (80009dc <port_init+0xa8>)
 800098c:	f7ff fbde 	bl	800014c <GPIO_Init_Input_Pin>
    GPIO_Init_Input_Pin(GPIOA,GPIO_PIN2,INPUT_PULL_UP_DOWN,DOWN);
 8000990:	2300      	movs	r3, #0
 8000992:	2208      	movs	r2, #8
 8000994:	2102      	movs	r1, #2
 8000996:	4811      	ldr	r0, [pc, #68]	; (80009dc <port_init+0xa8>)
 8000998:	f7ff fbd8 	bl	800014c <GPIO_Init_Input_Pin>
    GPIO_Init_Input_Pin(GPIOA,GPIO_PIN3,INPUT_PULL_UP_DOWN,DOWN);
 800099c:	2300      	movs	r3, #0
 800099e:	2208      	movs	r2, #8
 80009a0:	2103      	movs	r1, #3
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <port_init+0xa8>)
 80009a4:	f7ff fbd2 	bl	800014c <GPIO_Init_Input_Pin>

    GPIO_Init_Output_Pin(GPIOA,GPIO_PIN4,OUTPUT_PUSH_PULL_2MHZ);
 80009a8:	2202      	movs	r2, #2
 80009aa:	2104      	movs	r1, #4
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <port_init+0xa8>)
 80009ae:	f7ff fc30 	bl	8000212 <GPIO_Init_Output_Pin>
    GPIO_Init_Output_Pin(GPIOA,GPIO_PIN5,OUTPUT_PUSH_PULL_2MHZ);
 80009b2:	2202      	movs	r2, #2
 80009b4:	2105      	movs	r1, #5
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <port_init+0xa8>)
 80009b8:	f7ff fc2b 	bl	8000212 <GPIO_Init_Output_Pin>
    GPIO_Init_Output_Pin(GPIOA,GPIO_PIN6,OUTPUT_PUSH_PULL_2MHZ);
 80009bc:	2202      	movs	r2, #2
 80009be:	2106      	movs	r1, #6
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <port_init+0xa8>)
 80009c2:	f7ff fc26 	bl	8000212 <GPIO_Init_Output_Pin>
    GPIO_Init_Output_Pin(GPIOA,GPIO_PIN7,OUTPUT_PUSH_PULL_2MHZ);
 80009c6:	2202      	movs	r2, #2
 80009c8:	2107      	movs	r1, #7
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <port_init+0xa8>)
 80009cc:	f7ff fc21 	bl	8000212 <GPIO_Init_Output_Pin>

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40010800 	.word	0x40010800

080009e0 <main>:
char text[]={"STM32F103C6 SOC"};
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

	clock_init();
 80009e6:	f7ff ff97 	bl	8000918 <clock_init>
	delay_ms(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f7ff ff76 	bl	80008dc <delay_ms>
  	port_init();
 80009f0:	f7ff ffa0 	bl	8000934 <port_init>

  	lcd_INIT(_40DOTS,_2LINE,_8BIT);
 80009f4:	2208      	movs	r2, #8
 80009f6:	2102      	movs	r1, #2
 80009f8:	2008      	movs	r0, #8
 80009fa:	f7ff fe69 	bl	80006d0 <lcd_INIT>
    lcd_Send_Command(LCD_CURS_OFF_COMMAND | LCD_BLINK_ON_COMMAND | LCD_DATA_ON_COMMAND);
 80009fe:	200d      	movs	r0, #13
 8000a00:	f7ff febc 	bl	800077c <lcd_Send_Command>
	lcd_WRITE_TEXT(text);
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <main+0x88>)
 8000a06:	f7ff ff3b 	bl	8000880 <lcd_WRITE_TEXT>

	lcd_Send_Command(LCD_CURSOR_POS_2ND_LINE_COMMAND);
 8000a0a:	20c0      	movs	r0, #192	; 0xc0
 8000a0c:	f7ff feb6 	bl	800077c <lcd_Send_Command>
    /* Loop forever */
    char keyPressed;
	for(;;)
	{
		keyPressed = KeyPad_Scanning(GPIOA);
 8000a10:	4816      	ldr	r0, [pc, #88]	; (8000a6c <main+0x8c>)
 8000a12:	f7ff fd27 	bl	8000464 <KeyPad_Scanning>
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]

		if(keyPressed=='c')
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b63      	cmp	r3, #99	; 0x63
 8000a1e:	d103      	bne.n	8000a28 <main+0x48>
		{
			lcd_Send_Command(LCD_SHIFT_CURS_R_COMMAND);
 8000a20:	2014      	movs	r0, #20
 8000a22:	f7ff feab 	bl	800077c <lcd_Send_Command>
 8000a26:	e7f3      	b.n	8000a10 <main+0x30>
		}
		else if(keyPressed!=(0))
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d008      	beq.n	8000a40 <main+0x60>
		{
			lcd_SET_CURSOR_POSITION(2,5);
 8000a2e:	2105      	movs	r1, #5
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fec1 	bl	80007b8 <lcd_SET_CURSOR_POSITION>
			lcd_WRITE_CHAR(keyPressed);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff01 	bl	8000840 <lcd_WRITE_CHAR>
 8000a3e:	e7e7      	b.n	8000a10 <main+0x30>
		}

		else if(GPIO_Read_Pin(GPIOA,14))
 8000a40:	210e      	movs	r1, #14
 8000a42:	480a      	ldr	r0, [pc, #40]	; (8000a6c <main+0x8c>)
 8000a44:	f7ff fc64 	bl	8000310 <GPIO_Read_Pin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0e0      	beq.n	8000a10 <main+0x30>
		{
			while(GPIO_Read_Pin(GPIOA,14));
 8000a4e:	bf00      	nop
 8000a50:	210e      	movs	r1, #14
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <main+0x8c>)
 8000a54:	f7ff fc5c 	bl	8000310 <GPIO_Read_Pin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f8      	bne.n	8000a50 <main+0x70>
			GPIO_Toggle_Pin(GPIOB,13);
 8000a5e:	210d      	movs	r1, #13
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <main+0x90>)
 8000a62:	f7ff fc42 	bl	80002ea <GPIO_Toggle_Pin>
		keyPressed = KeyPad_Scanning(GPIOA);
 8000a66:	e7d3      	b.n	8000a10 <main+0x30>
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <HardFault_Handler+0x4>

08000a86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <BusFault_Handler+0x4>

08000a92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <UsageFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f82e 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	; (8000b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	; (8000b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afa:	f7ff ffe5 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f000 f821 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b02:	f7ff ff6d 	bl	80009e0 <main>
  bx lr
 8000b06:	4770      	bx	lr
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b10:	08000bac 	.word	0x08000bac
  ldr r2, =_sbss
 8000b14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b18:	20000038 	.word	0x20000038

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>
	...

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <HAL_IncTick+0x20>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000034 	.word	0x20000034

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2500      	movs	r5, #0
 8000b48:	4e0c      	ldr	r6, [pc, #48]	; (8000b7c <__libc_init_array+0x38>)
 8000b4a:	4c0d      	ldr	r4, [pc, #52]	; (8000b80 <__libc_init_array+0x3c>)
 8000b4c:	1ba4      	subs	r4, r4, r6
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	42a5      	cmp	r5, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	f000 f81a 	bl	8000b8c <_init>
 8000b58:	2500      	movs	r5, #0
 8000b5a:	4e0a      	ldr	r6, [pc, #40]	; (8000b84 <__libc_init_array+0x40>)
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <__libc_init_array+0x44>)
 8000b5e:	1ba4      	subs	r4, r4, r6
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b6c:	4798      	blx	r3
 8000b6e:	3501      	adds	r5, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b76:	4798      	blx	r3
 8000b78:	3501      	adds	r5, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	08000ba4 	.word	0x08000ba4
 8000b80:	08000ba4 	.word	0x08000ba4
 8000b84:	08000ba4 	.word	0x08000ba4
 8000b88:	08000ba8 	.word	0x08000ba8

08000b8c <_init>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	bf00      	nop
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr

08000b98 <_fini>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	bf00      	nop
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr
